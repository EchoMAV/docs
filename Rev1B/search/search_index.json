{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"EchoMAV Documentation","text":"<p>Welcome to the EchoPilot AI Technical Library. Please find the quick links below to get started:</p> <p>EchoPilot AI Hardware Overview </p> <p>Building ArduPilot for the EchoPilot AI</p> <p>Building PX4 for the EchoPilot AI</p> <p>Building L4T (Orin NX or Orin Nano) for the EchoPilot AI</p> <p>Building L4T (Xavier NX) for the EchoPilot AI</p> <p>Building L4T (Nano) for the EchoPilot AI</p>"},{"location":"ap_simulator/","title":"Ap simulator","text":""},{"location":"ap_simulator/#how-to-set-up-an-ardupilot-simulator","title":"How to set up an Ardupilot simulator","text":""},{"location":"ap_simulator/#if-you-are-running-on-windows-you-will-first-need-to-install-wsl1-windows-subsystem-for-linux-version-1","title":"If you are running on windows, you will first need to install WSL1 (Windows Subsystem for Linux version 1)","text":"<p>Click Start, type PowerShell, and then right click \"PowerShell\" and \"Run As Administrator\" <pre><code>dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n</code></pre> Restart your system</p> <p>Open PowerShell again <pre><code>wsl --set-default-version 1\nwsl --install -d Ubuntu-20.04\n</code></pre></p> <p>Once installation completes, you should be able to run Ubuntu, Click Start, type Ubuntu, and then click Ubuntu on Windows. The first time it runs you will create a username and password to use withing Ubuntu. The instructions below pick up at the point you have a command prompt.</p>"},{"location":"ap_simulator/#install-ardupilot-and-run-the-simulator","title":"Install Ardupilot and run the simulator","text":"<p>Get prereqs: <pre><code>sudo apt-get update\nsudo apt-get install git\nsudo apt-get install gitk git-gui\n</code></pre> Clone repo: <pre><code>git clone https://github.com/ArduPilot/ardupilot.git\ncd ardupilot\ngit checkout Plane-4.3.1\ngit submodule update --init --recursive\n</code></pre> Set up build environment: <pre><code>Tools/environment_install/install-prereqs-ubuntu.sh -y\n</code></pre> Reload the path: <pre><code>. ~/.profile\n</code></pre> Run the simulator, which will build the code the first time: <pre><code>cd ArduPlane\n../Tools/autotest/sim_vehicle.py -j4 -f quadplane\n</code></pre> Once the simulator is built and running (it will take several minutes the first time you do it), you will need to set 2 key parameters by typing the following: <pre><code>param set Q_MAV_TYPE 20\nparam set BRD_SERIAL_NUM 4097\n</code></pre> At this point, you have ArduPlane 4.3.1 running and it will by default open a port on localhost:14550. Run the GCS and it should automatically connect to the simulator. Windows may ask you for permission to open the port, be sure and ALLOW the connection.</p> <p>You may stop the simulator using <code>Ctrl-C</code> </p>"},{"location":"ap_simulator/#be-sure-the-simulator-is-not-running-before-connecting-to-an-actual-vehicle","title":"Be sure the simulator is not running before connecting to an actual vehicle","text":""},{"location":"ap_simulator/#if-you-to-start-up-the-simulator-at-a-custom-location","title":"If you to start up the simulator at a custom location","text":"<p>You will need to edit the /Tools/autotest/locations.txt file If the simulator is running, stop it and exit using <code>Ctrl-C</code> Install a simple text editor called <code>nano</code> using: <pre><code>sudo apt-get install nano\n</code></pre> Edit the <code>locations.txt</code> file <pre><code>nano ~/ardupilot/Tools/autotest/locations.txt\n</code></pre> use the arrow keys to scroll down and add a new entry: <pre><code>NAME=Lat,Lon,Altitude,0\n</code></pre> Lat and Lon are decimal degrees, altitude is meters above sea level. I'm not sure what the last 0 is for, so just leave it 0. For example, Knoxville would be: <pre><code>Knoxville=35.92310,-84.22301,900,0\n</code></pre> Save the file and exit <pre><code>Ctrl-o &lt;enter&gt;\nCtrl-x\n</code></pre> You may now start the simulator specifying the name of your new location <pre><code>cd ~/ardupilot/ArduPlane\n../Tools/autotest/sim_vehicle.py -j4 -f quadplane -L &lt;YOUR LOCATION&gt;\n</code></pre> For example, to start the Knoxville location would be  <pre><code>../Tools/autotest/sim_vehicle.py -j4 -f quadplane -L Knoxville\n</code></pre></p>"},{"location":"build_ardupilot/","title":"Building ArduPilot","text":""},{"location":"build_ardupilot/#building-and-loading-ardupilot-firmware","title":"Building and Loading ArduPilot Firmware","text":"<p>As of ArduPilot 4.4, the EchoPilot AI hardware definition files are not yet pulled into the ArduPilot repository. Therefore, if you wish to use ArduPilot firmware on the EchoPilot AI, you will need to follow the steps below and build ArduPilot from source. Fortunately the process is straightforward:</p>"},{"location":"build_ardupilot/#prerequisites","title":"Prerequisites","text":"<p>These instructions were tested on Ubuntu 20.04 LTS. They are not guaranteed to work on any other flavor of Linux, within a virtual machine or under WSL 1 or 2. We recommend a physical machine running Ubuntu 20.04 LTS for the most pain-free experience.</p>"},{"location":"build_ardupilot/#download-ardupilot","title":"Download ArduPilot","text":"<p>These instructions will install ArduPilot in <code>~/ardupilot</code>. If you wish to use a different location, please adjust the directory below and throughout these instructions. If you are a novice, we recommend proceeding exactly as described below. <pre><code>cd ~\ngit clone --recurse-submodules https://github.com/ArduPilot/ardupilot\ncd ardupilot\n</code></pre></p>"},{"location":"build_ardupilot/#setup-the-toolchain","title":"Setup the toolchain","text":"<p><pre><code>Tools/environment_install/install-prereqs-ubuntu.sh -y\n</code></pre> Now reload the path (log-out and log-in to make permanent) <pre><code>. ~/.profile\n</code></pre></p>"},{"location":"build_ardupilot/#checkout-a-release-or-tag","title":"Checkout a release or tag","text":"<p>You can identify a version you wish to build by looking at the ArduPilot tags https://github.com/ArduPilot/ardupilot/tags. In the example below, we will demonstrate checking out release Copter-4.4.4 </p> <pre><code>git checkout Copter-4.4.4\ngit submodule update --init --recursive\n</code></pre>"},{"location":"build_ardupilot/#do-a-test-build","title":"Do a test build","text":"<p>Before we build firmware for the EchoPilot AI board, it is wise to first build a native target to verify that your toolchain and environment is setup and working. Build the sitl (software in the loop simulator) target first: <pre><code>./waf configure --board sitl\n./waf copter\n</code></pre> If the build completes without errors, congrats! If there are errors, you will need to resolve them before proceeding.</p>"},{"location":"build_ardupilot/#download-and-install-the-hardware-definition-files-for-ardupilot","title":"Download and Install the Hardware Definition Files for ArduPilot","text":"<p>Obtain the hardware board files from the EchoPilot AI BSP repo and checkout the appropriate branch matching the hardware revision of your EchoPilot AI using the commands below. The Hardware revision is marked on the board silkscreen near the FAN connector:</p> <pre><code>git clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\ngit checkout board_revision_1b     # Select the appropriate revision\n</code></pre> <p>Warning</p> <p>Be sure you checked out the appropriate branch matching your EchoPilot AI hardware revision!</p> <p>Use the <code>install_ardupilot.sh</code> script to automatically copy the EchoPilot HW hardware definition files into the right place in the ardupilot directory structure. The first (and only) argument when using this script is the path to where you have the ardupilot repo installed on your system, e.g., <code>~/ardupilot</code>. For example: <pre><code>./install_ardupilot.sh ~/ardupilot\n</code></pre></p>"},{"location":"build_ardupilot/#build-ardupilot-for-the-echopilot-ai","title":"Build ArduPilot for the EchoPilot AI","text":"<p>At this point, you should have the EchoPilot AI hardware files located in <code>~/ardupilot/libraries/AP_HAL_ChibiOS/hwdef/EchoPilotAI/</code>. To build firmware targeting EchoPilot AI, use the command: <pre><code>cd ~/ardupilot\n./waf configure --board EchoPilotAI\n./waf copter    # or choose a different target per below\n</code></pre></p> <p>Tip</p> <p>The example above builds copter, for other vehicle targets, see below: <pre><code>./waf copter                            # All multirotor types\n./waf heli                              # Helicopter types\n./waf plane                             # Fixed wing airplanes including VTOL\n./waf rover                             # Ground-based rovers and surface boats\n./waf sub                               # ROV and other submarines\n</code></pre></p> <p>The arducopter.apj and arducopter.bin file will be located in the <code>~/ardupilot/build/EchoPilotAI/bin/</code> folder. The firmware is now ready to be loaded on the board. This can be done by adding the upload argument as explained below, or using common ground control station software such as Mission Planner or QGroundControl to upload the <code>apj</code> file.</p> <p>Info</p> <p>If the EchoPilot AI's FMU USB connection is plugged in to your host computer, unplug it before proceeding. Also ensure the board is fully powered down. The board should be totally powered off before proceeding. The FMU will get power via the USB cable in the step below.</p>"},{"location":"build_ardupilot/#uploading-using-the-waf-script","title":"Uploading using the WAF script","text":"<p><pre><code>./waf copter --upload\n</code></pre> When the build completes, the system will wait for a USB connection from the EchoPilot AI's bootloader. You should see a message indicating <code>waiting for the bootloader...</code>. At this point, plug in a USB-A to USB-C cable between the host computer and the FMU USB connection on the EchoPilot AI. The board should be recognized and the firmware will be uploaded automatically.</p>"},{"location":"build_ardupilot/#upload-using-qgroundcontrol","title":"Upload using QGroundControl","text":"<p>Optionally, you can use QGroundControl to upload the <code>~/ardupilot/build/EchoPilotAI/bin/arducopter.apj</code> file created previously. This is especially useful if you wish to send a firmware update to a customer as they can do it without terminal access. Follow the steps to upload Custom Firmware using QGroundControl: https://docs.qgroundcontrol.com/master/en/SetupView/Firmware.html</p>"},{"location":"build_px4/","title":"Building PX4","text":""},{"location":"build_px4/#building-and-loading-px4-firmware","title":"Building and Loading PX4 Firmware","text":"<p>As of PX4 1.13.3, the EchoPilot AI hardware definition files are not yet pulled into the PX4 repository. Therefore, if you wish to use PX4 firmware on the EchoPilot AI, you will need to follow the steps below and build PX4 from source. Fortunately the process is straightforward:</p>"},{"location":"build_px4/#prerequisites","title":"Prerequisites","text":"<p>These instructions were tested on Ubuntu 20.04 LTS. They are not guaranteed to work on any other flavor of Linux, within a virtual machine or under WSL 1 or 2. We recommend a physical machine running Ubuntu 20.04 LTS for the most pain-free experience.</p>"},{"location":"build_px4/#download-px4","title":"Download PX4","text":"<p>These instructions will install PX4 in <code>~/PX4-Autopilot</code>. If you wish to use a different location, please adjust the directory below and throughout these instructions. If you are a novice, we recommend proceeding exactly as described below. <pre><code>cd ~\ngit clone https://github.com/PX4/PX4-Autopilot.git --recursive\ncd PX4-Autopilot\n</code></pre></p>"},{"location":"build_px4/#setup-the-toolchain","title":"Setup the toolchain","text":"<p>Note if you have built PX4 before, you can likely skip this step. Also remove the <code>--no-sim-tools</code> option if you wish to install the simulation toolchain. <pre><code>bash ./Tools/setup/ubuntu.sh --no-sim-tools\n</code></pre> At this point, it is recommended to log out and back in to ensure the paths are loaded.</p>"},{"location":"build_px4/#checkout-a-release","title":"Checkout a release","text":"<p>You can identify a version you wish to build by looking at the release history https://github.com/PX4/PX4-Autopilot/releases. In the example below, we will demonstrate checking out release 1.13.3  </p> <p>Info</p> <p>You can reuse an existing repo rather than cloning a new one if this isn't your first PX4 rodeo. In this case, clean the build environment before proceeding: <pre><code>make clean\nmake distclean\n</code></pre></p> <p><pre><code>git fetch origin v1.13.3\ngit checkout v1.13.3\n</code></pre> Update submodules: <pre><code>make submodulesclean\n</code></pre></p>"},{"location":"build_px4/#do-a-test-build","title":"Do a test build","text":"<p>Before we build firmware for the EchoPilot AI board, it is wise to first build a native target to verify that your toolchain and environment is setup and working. Build the px4_sitl (software in the loop simulator) first: <pre><code>make px4_sitl\n</code></pre> If the build completes without errors, congrats! If there are errors, you will need to resolve them before proceeding.</p>"},{"location":"build_px4/#build-px4-for-the-echopilot-ai","title":"Build PX4 for the EchoPilot AI","text":"<p>First obtain the hardware board files from the EchoPilot AI BSP repo and checkout the appropriate branch matching the hardware revision of you EchoPilot AI. The HW Revision is marked on the board silkscreen near the FAN connector:</p> <pre><code>git clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\ngit checkout board_revision_1b   # Change per your hardware\n</code></pre> <p>Warning</p> <p>Be sure you checked out the appropriate branch matching your EchoPilot AI hardware revision!</p> <p>Use the provided install script <code>install_px4.sh</code> to place the PX4 board definition files into the correct folder. The first argument is the path to where you have the ardupilot repo on your system, e.g. <code>~/PX4-Autopilot</code>: <pre><code>./install_px4.sh ~/PX4-Autopilot\n</code></pre> At this point, you should have the hardware files located in <code>~/PX4-Autopilot/boards/echomav/echopilot-ai/</code>. To build firmware targeting this board, use the command: <pre><code>make echomav_echopilot-ai\n</code></pre> The .px4 file will be located in the <code>~/PX4-Autopilot/build/echomav_echopilot-ai_default/</code> folder. The firmware is now ready to be loaded on the board.  </p> <p>Info</p> <p>If the EchoPilot AI is plugged in to your host computer, unplug it before proceeding. Also ensure there is no power to the EchoPilot AI. The board should be totally powered off before proceeding. The FMU will get power via the USB cable in the step below.</p> <p><pre><code>make echomav_echopilot-ai upload\n</code></pre> When the build completes, the system will wait for a USB connection from the EchoPilot AI's bootloader. You should see a message indicating <code>waiting for the bootloader...</code>. At this point, plug in a USB-A to USB-C cable between the host computer and the FMU USB connection on the EchoPilot AI. The board should be recognized and the firmware will be uploaded automatically.</p> <p>Optionally, you can use QGroundControl to upload the <code>~/PX4-Autopilot/build/echomav_echopilot-ai_default/echomav_echopilot-ai_default.px4</code> file created previously. This is especially useful if you wish to send a firmware update to a customer as they can do it without terminal access. Follow the steps here to upload Custom Firmware using QGroundControl: https://docs.px4.io/main/en/config/firmware.html</p>"},{"location":"compile_l4t/","title":"Compiling L4T for the Xavier NX on the EchoPilot AI","text":""},{"location":"compile_l4t/#instructions-for-customizing-the-device-tree-and-compiling-the-kernel-for-the-xavier-nx-on-echopilot-ai","title":"Instructions for customizing the device tree and compiling the kernel for the Xavier NX on EchoPilot AI","text":"<p>When a Jetson Xavier NX module is included with an EchoPilot AI purchase, it is flashed with a custom Linux for Tegra (L4T) image which includes support for the hardware configuration of the EchoPilot AI. The EchoPilot AI hardware provides provides nearly identical features of the Nvidia development kit board (PIf you wish to build/update the kernel for use with the EchoPilot AI, the instructions below will provide the information and files you need to ensure your custom image remains fully compatible with the EchoPilot AI hardware. When compared to a standard Nvidia development carrier board, the primary difference in the EchoPilot AI hardware are:</p> <ol> <li>The EchoPilot AI does not have an I2C HDMI controller</li> </ol> <p>To minimize console errors due to (1) which would otherwise be present, the kernel must be compiled from source and flashed to the Xavier NX using the Debug USB port and recovery mode. It is not possible to update only the dtb files because the pinmux changes require a full flash. The following instructions will walk you through the process.</p> <p>Warning</p> <p>These instructions were developed and tested on Ubuntu 20.04 LTS (with a Windows machine used for the Excel pinmux change). We recommend using a physical machine running Ubuntu 20.04 LTS.</p> <p>These instructions assume you are using a Production Jetson SOM. These instructions will not work with the SOM included with a Jetson developer kit. </p> <p>What you will doing:</p> <ol> <li>Download and setup the necessary files</li> <li>Replace .dtb and create a extlinux.conf file</li> <li>Generate the image and flash the device</li> </ol> <p>So buckle up and let's get started.</p>"},{"location":"compile_l4t/#download-and-setup-necessary-files","title":"Download and Setup Necessary Files","text":"<p>Note that you may need to create an NVIDIA developer account and login to download, so if you do not have a developer account please set that up before proceeding.  Next you will need to download three packages from Nvidia: Driver Package (BSP), Sample Root Filesystem and Driver Package (BSP) Sources 35.4.1. </p> <p>These instructions were developed using Jetson Linux 35.3.1. These instructions may continue to work for future releases,   but proceed with caution.</p> <p>The files to download are highlighted in blue below: </p> <p>The instructions below assume that the downloaded files are downloaded to the <code>~/Downloads/</code> folder.  </p>"},{"location":"compile_l4t/#extract-driver-package-bsp","title":"Extract Driver Package (BSP)","text":"<p>Note: the filename below will be different if you download a different version.</p> <pre><code>mkdir -p ~/XavierNX\ntar xpf ~/Downloads/Jetson_Linux_R35.4.1_aarch64.tbz2 -C ~/XavierNX\n</code></pre>"},{"location":"compile_l4t/#extract-sample-root-file-system-sample-root-filesystem","title":"Extract sample Root File System  (Sample Root Filesystem)","text":"<p>Extract contents into Linux_for_Tegra/rootfs/. Note the filename below will be different if you downloaded a different version. <pre><code>sudo tar xpf ~/Downloads/Tegra_Linux_Sample-Root-Filesystem_R35.4.1_aarch64.tbz2 -C ~/XavierNX/Linux_for_Tegra/rootfs/\ncd ~/XavierNX/Linux_for_Tegra\nsudo ./apply_binaries.sh\n</code></pre></p> <p>Note</p> <p>Before \u201capply_binaries.sh\u201d is run, the content in \u201cLinux_for_Tegra/rootfs/\u201d is purely Ubuntu. After \u201capply_binaries.sh\u201d the \u201crootfs/\u201d will contain NVIDIA content, e.g, drivers for the GPU and some firmware.</p>"},{"location":"compile_l4t/#create-the-default-user","title":"Create the default user","text":"<p>This step allows you to configure your username, password and hostname and also accept the license. <pre><code>sudo tools/l4t_create_default_user.sh -u {USERNAME} -p {PASSWORD} -n {HOSTNAME} --accept-license\n</code></pre></p>"},{"location":"compile_l4t/#get-the-echopilot-dtb-and-extlinuxconf-files","title":"Get the EchoPilot .dtb and extlinux.conf files","text":"<p>The files you will need to replace include the device tree binary (.dtb) and extlinux.conf files. These files can be obtained from the repository https://github.com/EchoMAV/echopilot_ai_bsp. Use the steps below to clone and install these files:</p> <p>Clone the files: <pre><code>cd ~\ngit clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\n</code></pre> Checkout the appropriate branch for your EchoPilot AI board revision. For example, EchoPilot AI REV1B hardware: <pre><code>git checkout board_revision_1b\n</code></pre> Run the install script to copy the dtb and extlinux.conf files into your Linux_for_Tegra folder. The usage is <code>./install_l4t_xavier_nx.sh [Path to Linux_for_Tegra]</code>, e.g.: <pre><code>./install_l4t_xavier_nx.sh ~/XavierNX/Linux_for_Tegra/\n</code></pre> Ensure this script completes with no errors before proceeding with flashing.</p>"},{"location":"compile_l4t/#flash-device","title":"Flash device","text":"<p>Important</p> <p>While not shown in the images below. The EchoPilot AI should be plugged into a Carrier Board for these steps, as that is how the Jetson module is powered. </p> <ol> <li>Plug in a micro usb cable to the Jetson Debug port (J25) on the EchoPilot AI. Refer to the image below for the Jetson Program / Debug connector on the left side. </li> <li>Hold the recovery button down as power is applied. (see image below for location of the recovery button). </li> <li>Apply power via the XT30 connector on the carrier board, and release recovery button after a few seconds.</li> <li>From your host PC, flash the Xavier NX device:</li> </ol> <pre><code>cd ~/XavierNX/Linux_for_Tegra/\nsudo ./flash.sh jetson-xavier-nx-devkit-emmc mmcblk0p1\n</code></pre>"},{"location":"compile_l4t_nano/","title":"Compiling L4T for the Jetson Nano on the EchoPilot AI","text":""},{"location":"compile_l4t_nano/#instructions-for-customizing-the-device-tree-and-compiling-the-kernel-for-the-nano-on-echopilot-ai","title":"Instructions for customizing the device tree and compiling the kernel for the Nano on EchoPilot AI","text":"<p>When a Jetson Nano module is included with an EchoPilot AI purchase, it is flashed with a custom Linux for Tegra (L4T) image which includes support for the hardware and pin configuration of the EchoPilot AI. If you wish to build/update the kernel for use with the EchoPilot AI, the instructions below will provide the information and files you need to ensure your custom image remains fully compatible with the EchoPilot AI hardware. When compared to a standard Nvidia development carrier board, the primary differences in the EchoPilot AI hardware are:</p> <ol> <li>The EchoPilot AI does not have an I2C HDMI controller</li> </ol> <p>To minimize console errors due to (1), the kernel must be compiled from source and flashed to the Nano using the Debug USB port and recovery mode. The following instructions will walk you through the process.</p> <p>Warning</p> <p>These instructions were developed and tested on Ubuntu 20.04 LTS (with a Windows machine used for the Excel pinmux change). We recommend using a physical machine running Ubuntu 20.04 LTS.</p> <p>These instructions assume you are using a Production Jetson Nano P3448_0002 SOM. These instructions will not work with the SOM included with a Jetson Nano developer kit. </p> <p>What you will doing:</p> <ol> <li>Download and setup the necessary files</li> <li>Replace .dtb file and create a extlinux.conf file</li> <li>Generate the image and flash the device</li> </ol> <p>So buckle up and let's get started.</p> <p>_These instructions are adapted from the the excellent document by Ridge Run How to build NVIDIA Jetson Nano kernel along with documentation pulled from Nvidia's forums. Some minor changes are included from this document because the last update was for LT4 32.3.1.</p> <p>Note that Nvidia has dropped software support for the Nano. It has a planned EOL of 2027, but software updates are no longer being made to support it.</p>"},{"location":"compile_l4t_nano/#download-and-setup-necessary-files","title":"Download and Setup Necessary Files","text":"<p>Note that you will need to create an NVIDIA developer account and login to download, so if you do not have a developer account please set that up before proceeding.  Next you will need to download three packages from Nvidia: Driver Package (BSP), Sample Root Filesystem and Driver Package (BSP) Sources. </p> <p>These instructions were developed using Jetson Linux 32.7.3, you can not use releases beyond 32.7.x as the Nano is no longer supported by Nvidia for newer software releases.</p> <p>The files to download are highlighted in blue below: </p> <p>Note</p> <p>The instructions below assume that the downloaded files are downloaded to the <code>~/Downloads/</code> folder.  </p>"},{"location":"compile_l4t_nano/#extract-driver-package-bsp","title":"Extract Driver Package (BSP)","text":"<p>Note: the filename below will be different if you download a different version.</p> <pre><code>mkdir -p ~/Nano\ntar -xf ~/Downloads/Jetson_Linux_R32.7.3_aarch64.tbz2 -C ~/Nano\n</code></pre>"},{"location":"compile_l4t_nano/#extract-kernel-sources-driver-package-bsp-sources","title":"Extract kernel sources (Driver Package (BSP) Sources)","text":"<p>In the public_sources.tbz2 (BSP sources) zip file, there will be many other zipped files inside, but we are only interested in kernel_src.tbz2. Extract this file into a folder to named <code>sources</code> within the <code>Linux_for_Tegra</code> folder. The steps are: <pre><code>mkdir ~/Downloads/temp\ntar -xf ~/Downloads/public_sources.tbz2 -C ~/Downloads/temp\nmkdir ~/Nano/Linux_for_Tegra/sources\nsudo tar -xf ~/Downloads/temp/Linux_for_Tegra/source/public/kernel_src.tbz2 -C ~/Nano/Linux_for_Tegra/sources\ncd ~/Nano/Linux_for_Tegra\nsudo ./source_sync.sh -t tegra-l4t-r32.7.3\n</code></pre></p>"},{"location":"compile_l4t_nano/#extract-sample-root-file-system-sample-root-filesystem","title":"Extract sample Root File System  (Sample Root Filesystem)","text":"<p>Extract contents into Linux_for_Tegra/rootfs/.  <pre><code>mkdir ~/Nano/Linux_for_Tegra/rootfs\nsudo tar -xf ~/Downloads/Tegra_Linux_Sample-Root-Filesystem_R32.7.3_aarch64.tbz2 -C ~/Nano/Linux_for_Tegra/rootfs/\nsudo ./apply_binaries.sh\n</code></pre></p> <p>Note</p> <p>Before \u201capply_binaries.sh\u201d is run, the content in \u201cLinux_for_Tegra/rootfs/\u201d is purely Ubuntu. After \u201capply_binaries.sh\u201d the \u201crootfs/\u201d will contain NVIDIA content, e.g, drivers for the GPU and some firmware.</p>"},{"location":"compile_l4t_nano/#get-the-echopilot-dtb-and-extlinuxconf-files","title":"Get the EchoPilot .dtb and extlinux.conf files","text":"<p>The files you will need to replace include the device tree binary (.dtb) and extlinux.conf files. These files can be obtained from the echopilot_ai_bsp repository https://github.com/EchoMAV/echopilot_ai_bsp. Use the steps below to clone and install these files:</p> <p>Clone the files: <pre><code>cd ~\ngit clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\n</code></pre> Checkout the appropriate branch for your EchoPilot AI board revision. For example, EchoPilot AI Rev1B hardware: <pre><code>git checkout board_revision_1b\n</code></pre> Run the install script to copy the dtb and extlinux.conf files into your Linux_for_Tegra folder. The usage is <code>./install_l4t_nano.sh [Path to Linux_for_Tegra]</code>, e.g.: <pre><code>sudo ./install_l4t_nano.sh ~/Nano/Linux_for_Tegra/\n</code></pre> Ensure this script completes with no errors before proceeding with flashing.</p>"},{"location":"compile_l4t_nano/#optional-create-a-default-user-and-accept-the-license","title":"(Optional) Create a Default User and Accept the License","text":"<p>This step is optional, if you do not do it, then after the flash you will need to connect to the Jetson via a terminal application using the interface enumerated on the Jetson Debug port (J25) AFTER the flash is complete. You'll be greeted with a setup interface prompting you to accept Nvidia's license, set up the network, set up the default user, etc. To avoid this step, you can create the default user and accept the license prior to the flash using the command below. <pre><code>sudo tools/l4t_create_default_user.sh -u echopilot -p echopilot -n EchoPilotAI --accept-license\n</code></pre> In the above, you can change the username <code>-u</code>, password <code>-p</code> and host name <code>-n</code> to whatever values you prefer.</p>"},{"location":"compile_l4t_nano/#flash-device","title":"Flash device","text":"<p>Important</p> <p>While not shown in the images below. The EchoPilot AI should be plugged into a Carrier Board for these steps, as that is how the Jetson module is powered. </p> <ol> <li>Plug in a micro usb cable to the Jetson Debug port (J25) on the EchoPilot AI. Refer to the image below for the Jetson Program / Debug connector on the left side. </li> <li>Hold the recovery button down as power is applied. (see image below for location of the recovery button). </li> <li>Apply power via the XT30 connector on the carrier board, and release recovery button after a few seconds.</li> <li>Flash device using the command below:</li> </ol> <pre><code>cd ~/Nano/Linux_for_Tegra/\nsudo ./flash.sh jetson-nano-emmc mmcblk0p1\n</code></pre>"},{"location":"compile_l4t_orin/","title":"Compiling L4T for the Jetson Orin NX and Orin Nano on the EchoPilot AI","text":""},{"location":"compile_l4t_orin/#instructions-for-customizing-the-device-tree-and-compiling-the-kernel-for-the-orin-nx-on-echopilot-ai","title":"Instructions for customizing the device tree and compiling the kernel for the Orin NX on EchoPilot AI","text":"<p>When a Jetson Orin NX or Orin Nano module is included with an EchoPilot AI purchase, it is flashed with a custom Linux for Tegra (L4T) image which includes support for the hardware configuration of the EchoPilot AI. If you wish to build/update the kernel for use with the EchoPilot AI, the instructions below will provide the information and files you need to ensure your custom image remains fully compatible with the EchoPilot AI hardware. When compared to a standard Nvidia development carrier board, the primary differences in the EchoPilot AI hardware are summarized below. In the build steps below you will be applying a customized DTB file which applies these fixes:</p> <p>The EchoPilot AI is functionally similar to an Nvidia Xavier NX (P3509) development kit board, with a few exceptions.  - The EchoPilot AI does not have the EEPROM on board which Nvidia carrier boards use for internal board id storage. (EchoPilot AI does have an AT24CS01-STUM unique ID EEPROM at I2C 0x58 on the Jetson I2C bus.).  - As of L4T 35.4.1, the display(hdmi) must be disabled as the EchoPilot AI is headless, otherwise the OS will not fully boot. - By default, the serial port routed to the Iridium connector (J10) is disabled. Our custom dtb enables it.</p> <p>Warning</p> <p>These instructions were developed and tested on Ubuntu 20.04 LTS. We recommend using a physical machine running Ubuntu 20.04 LTS.</p> <p>What you will doing:</p> <ol> <li>Download and setup the necessary files</li> <li>Replace a .dtb file </li> <li>Generate the image and flash the device</li> </ol> <p>So buckle up and let's get started.</p>"},{"location":"compile_l4t_orin/#download-and-setup-necessary-files","title":"Download and Setup Necessary Files","text":"<p>Note that you will need to create an NVIDIA developer account and login to download, so if you do not have a developer account please set that up before proceeding.  Next you will need to download three packages from Nvidia: Driver Package (BSP), Sample Root Filesystem and Driver Package (BSP) Sources. </p> <p>These instructions were developed using Jetson Linux 35.4.1, but generally we recommend you download the latest available.</p> <p>The files to download are highlighted in blue below: </p> <p>Note</p> <p>The instructions below assume that the downloaded files are downloaded to the <code>~/Downloads/</code> folder.  </p>"},{"location":"compile_l4t_orin/#extract-driver-package-bsp","title":"Extract Driver Package (BSP)","text":"<p>Note: the filename below will be different if you download a different version.</p> <pre><code>mkdir -p ~/Orin\ntar xpf ~/Downloads/Jetson_Linux_R35.4.1_aarch64.tbz2 -C ~/Orin\n</code></pre>"},{"location":"compile_l4t_orin/#extract-sample-root-file-system-sample-root-filesystem","title":"Extract sample Root File System  (Sample Root Filesystem)","text":"<p>Extract contents into Linux_for_Tegra/rootfs/.  <pre><code>sudo tar xpf ~/Downloads/Tegra_Linux_Sample-Root-Filesystem_R35.4.1_aarch64.tbz2 -C ~/Orin/Linux_for_Tegra/rootfs/\ncd ~/Orin/Linux_for_Tegra\nsudo ./apply_binaries.sh\n</code></pre></p> <p>Note</p> <p>If <code>apply_binaries.sh</code> failes, you host computer may be missing some dependencies. Please make note of the missing packages and install them using <code>sudo apt-get install XXXXX</code>. Before <code>apply_binaries.sh`` is run, the content in \u201cLinux_for_Tegra/rootfs/\u201d is purely Ubuntu. After</code>apply_binaries.sh<code>,</code> the \u201crootfs/\u201d will contain NVIDIA content, e.g, drivers for the GPU and some firmware.</p>"},{"location":"compile_l4t_orin/#create-the-default-user","title":"Create the default user","text":"<p>This step allows you to configure your username, password and hostname and also accept the license. <pre><code>sudo tools/l4t_create_default_user.sh -u {USERNAME} -p {PASSWORD} -n {HOSTNAME} --accept-license\n</code></pre></p>"},{"location":"compile_l4t_orin/#get-the-echopilot-dtb-file","title":"Get the EchoPilot .dtb file","text":"<p>The file you will need to replace is a device tree binary (.dtb) file. This file can be obtained from the echopilot_ai_bsp repository https://github.com/EchoMAV/echopilot_ai_bsp. Use the steps below to clone this repo and install this file using the providing installation script:</p> <p>Clone the repo: <pre><code>cd ~\ngit clone https://github.com/EchoMAV/echopilot_ai_bsp\ncd echopilot_ai_bsp\n</code></pre> Checkout the appropriate branch for your EchoPilot AI board revision. For example, EchoPilot AI Rev1B hardware: <pre><code>git checkout board_revision_1b\n</code></pre> Run the install script to copy the dts file into your Linux_for_Tegra folder. The usage is <code>./install_l4t_orin.sh [Path to Linux_for_Tegra]</code>, e.g.: <pre><code>sudo ./install_l4t_orin.sh ~/Orin/Linux_for_Tegra/\n</code></pre> Ensure this script completes with no errors before proceeding with flashing.</p>"},{"location":"compile_l4t_orin/#flash-device","title":"Flash device","text":"<p>Important</p> <p>While not shown in the images below. The EchoPilot AI should be plugged into a Carrier Board for these steps, as that is how the Jetson module is powered. </p> <p>Important</p> <p>The Jetson Orin requires a NVMe M.2 SSD drive. Before proceeding, you should have a drive installed into the EchoPilot AI and secured with a M2x3mm wafer head screw.   </p> <ol> <li>Plug in a micro usb cable to the Jetson Debug port (J25) on the EchoPilot AI. Refer to the image below for the Jetson Program / Debug connector on the left side.</li> </ol> <p> 2. Hold the recovery button down as power is applied. (see image below for location of the recovery button).</p> <p> 3. Apply power via the XT30 connector on the carrier board, and release the recovery button after a few seconds. 4. Build the image and flash device using the command below:</p> <pre><code>cd ~/Orin/Linux_for_Tegra/\nsudo ./tools/kernel_flash/l4t_initrd_flash.sh --external-device nvme0n1p1 -c tools/kernel_flash/flash_l4t_external.xml -p \"-c bootloader/t186ref/cfg/flash_t234_qspi.xml\" --showlogs --network usb0 p3509-a02+p3767-0000 internal\n</code></pre> <p>Note</p> <p>The first time you run this script, your system may be missing dependencies. The script will tell you what is missing, please install them using <code>sudo apt-get install XXXXXX</code>. ```</p> <p>Note</p> <p>On our own host Linux systems, we have observed that the Nvidia script above may sometimes timeout due to a USB write error. This problem appears to be related to USB autosuspend. If you encounter similar errors, please try this command to disable autosuspend and then attempt flashing again. <pre><code>sudo bash -c \"echo -1 &gt; /sys/module/usbcore/parameters/autosuspend\"\n</code></pre></p> <p>Note</p> <p>The flash command above builds the image and flashes. Once the image is built the first time, you can flash additional boards without the time consuming image rebuild each time. Add the <code>--flash-only</code> argument to the l4t_initrd_flash.sh script.</p>"},{"location":"echopilot_ai/","title":"EchoPilot AI Documentation","text":""},{"location":"echopilot_ai/#overview","title":"Overview","text":"<p>The EchoPilot AI is a highly integrated vehicle control and edge computing system designed to power next-generation uncrewed systems. The EchoPilot AI supports computer vision, machine learning, autonomy, artificial intelligence and other advanced edge computing needs. The EchoPilot AI implements a STM32H7-based autopilot compatible with the popular Ardupilot and PX4 projects, and uses Pixhawk open-hardware connectivity standards. </p> <p>The power of  an advanced autopilot is seamlessly combined with high-performance computing (including AI and machine learning), IP networking, cloud connectivity and flexible low-latency hardware accelerated video encoding.</p> <p></p> <p>Autopilot Sensors</p> Function Part Number IMU 1 ICM42688P IMU 2 ICM42688P IMU 3 ICM42688P Barometer 1 ICP-20100 Barometer 2 ICP-20100 Magnetometer PNI RM3100 Add-On INS Standalone modules only via RS-232 <p>The hardware is configured into a two board stack. The upper board is the EchoPilot AI board, and it contains the flight management unit, peripherals, sensors and Nvidia Jetson interface. The lower board is the Carrier Board, and it handles power regulation and connectors. Two high-density FX23L-80S-0.5SV 80-pin board-to-board connectors are used between the two boards. There is 10mm between boards.</p> <p>This design philosophy achieves multiple goals :</p> <ol> <li>For integrated vehicle solutions, it is often desired to design a custom carrier board to add additional components, minimize cables/wiring and integrate power distribution. The EchoPilot AI's design allows you to optionally design a custom carrier board (using the provided Carrier Board as a reference design).</li> <li>A stacked solution minimizes X-Y size in exchange for moving into the Z axis, which is an acceptable compromise for most uncrewed vehicles.</li> <li>Moving the switching power regulators to the Carrier board reduces noise near the sensitive sensors on EchoPilot AI board and reduces the thermal load of the EchoPilot AI mainboard.</li> <li>A stacked design is more future proof, as peripherals can often be added to the Carrier Board without a re-design of the EchoPilot AI main board.</li> </ol>"},{"location":"echopilot_ai/#quick-start-guide","title":"Quick Start Guide","text":""},{"location":"echopilot_ai/#accessing-the-jetson-via-the-console","title":"Accessing the Jetson via the console","text":"<p>If you included a Jetson SOM in your purchase, it will have been flashed and tested at the factory. If you have a new Jetson module that is not flashed, please see Building and Flashing a Jetson with L4T instructions.</p> <p>Warning</p> <p>Do not run the Jetson SOM without a heat sink. The module may be damaged or performance throttled. See connecttech.com for recommended active and passive heat sinks and heat spreaders.</p> <ol> <li>Assemble the EchoPilot AI board with a Carrier Board, using 10mm standoffs between the two boards.</li> <li>If a Jetson Module is not already installed in the EchoPilot AI, install the module now.</li> <li>Attached a USB cable between your host computer and J15 (Console) on the EchoPilot AI Board </li> <li>In step 3, your host computer should have enumerated a virtual comm port. You will now need to find the name of the port.</li> </ol> <p>Info</p> <p>On Windows: Open Device Manager (Start \u2192 Control Panel \u2192 Hardware and Sound \u2192 Device Manager) Look in the Device Manager list, open the category \"Ports\", and note the COM port added USB Serial Port (COM?) (e.g., COM10). On Linux: Run <code>dmesg -w</code> and then plug in unplug and replug in the USB cable. You should see the name of the device added, typically <code>FTDI USB Serial device converter now attached to ttyUSB?</code> (e.g., ttyUSB0). </p> <p>Use a terminal program to connect to the Jetson's console at 115200 baud, 8N1. </p> <p>Info</p> <p>On Windows: We recommend Putty or TeraTerm. On Linux: We recommend Picocom. Install with <code>sudo apt-get install picocom</code>. Use with <code>picocom /dev/ttyUSB? -b 115200</code>. To exit picocom, use <code>Ctrl-a Ctrl-x</code>.</p> <p>Power the Carrier Board with 7-56VDC source capable of supplying up to 4A.</p> <p>Warning</p> <p>If using a bench supply with over-current protection, we recommend turning it OFF. The boot process requires short bursts of high current and over-current protection on some supplies will result in a failed boot. In most cases, if the Jetson fails to boot it is due to a poor power supply.</p> <p>You should now see the boot messages in your console, and once boot is complete, you will see a login prompt.</p> <p>Note</p> <p>The default username is echopilot and the default password is echopilot</p> <p>Success</p> <p>At this point you are logged into the Jetson and can begin configuring the network, installing applications, etc.</p>"},{"location":"echopilot_ai/#connecting-to-the-fmu-via-the-usb-connector","title":"Connecting to the FMU via the USB connector","text":"<ol> <li>Attach a USB cable between the host computer and the FMU USB connector (J7).</li> <li>Start a ground control application on the host computer such as QGroundControl or Mission Planner.</li> </ol> <p>Info</p> <p>QGroundControl: Will automatically connect. Mission Planner: Select the appropriate COM port at the top right, 115200, then click CONNECT.</p>"},{"location":"echopilot_ai/#streaming-telemetry-over-the-network","title":"Streaming telemetry over the network","text":"<p>As of September, 2023, EchoMAV is provisioning Jetson hardware with software which includes setting the Jetson to a static IP address, installing a web UI and configuring mavlink-router to stream telemetry from the autopilot to 10.223.1.10:14550 over UDP. If you have an earlier release or flash your own image, you can install the default software using the instructions here. The rest of the instructions below assume the Jetson module installed in your EchoPilot AI hardware has been provisioned using our software installation.</p> <p>Default telemetry will stream to <code>10.223.1.10</code> using UDP (client mode) port 14550. This will allow automatic connection to common Ground Control Stations including QGroundControl and Mission Planner. For this to work, your host computer must be set to <code>10.223.1.10</code> and the EchoPilot AI must have a network connection between one of the Ethenret ports and the host computer</p> <p>The telemetry endpoint can be easily changed by using the web UI at https://{IP_ADDRESS} (the recommendeded way), or more advanced users can use the command line by first gaining console access and then editing <code>\\etc\\mavlink-router\\main.conf</code>. For example:</p> <p><pre><code>[UdpEndpoint alpha]\nMode = Normal\nAddress = 10.223.1.10  #change to target IP address\nPort = 14550\n</code></pre> Then restart the mavlink-router service (or reboot) <pre><code>sudo systemctl restart mavlink-router\n</code></pre></p>"},{"location":"echopilot_ai/#echopilot-ip-addressing","title":"EchoPilot IP Addressing","text":"<p>The EchoPilot AI will be labeled from the factory with a static IP address in the 10.223.0.0/16 subnet such as 10.223.134.126 (for example). If you do not know the IP address, you may be able to access the system using the backdoor/alias IP of 192.168.154.0/24. </p> <p>Using EchoMAV's software stack, the system's static IP address is calculated using the last two octets of the Jetson's <code>eth0</code> interface MAC address with a netmask of 255.255.0.0 (/16). For example, given the MAC address of 00:30:1A:4E:A4:3E, the last two octets 0xA4 and 0x3E are onverted from hex to decimal and then assigned as the last two octets of the IP address. In this example, this MAC address would correspond to 10.223.164.62/16 because 0xA4 = 164 and 0x3E = 62. This IP address is printed on the label from the factory.</p> <p>To access the Jetson module using IP, first set up your host computer to have a static IP address in the 10.223.0.0/16 subnet with any IP address OTHER than the address of the EchoPilot AI.</p> <p>Info</p> <p>On Windows: Open Device Manager (Windows Key + X \u2192 Press \"W\" \u2192 Click on \"Change adapter options\" \u2192 Right click, properties of the adapter connected to the EchoPilot AI \u2192 Highlight \"Internet Protocol Version 4 (TCP/IPv4) and click Properties ). Select \"Use the following IP address\" and configure the IP address and Subnet mask. Then click OK \u2192 Close.  </p> <p></p> <p>On Linux: Find the wired interface name, most typically this can be found using <pre><code>$ ip ad\nenp43s0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc fq_codel state DOWN group default qlen 1000\nlink/ether 34:73:5a:e8:57:3f brd ff:ff:ff:ff:ff:ff\n</code></pre> In the response above, the interface name is <code>enp43s0</code>. Use <code>nmcli</code> and the interface name found above set a static IP address (e.g. 10.223.1.10/16):  <pre><code>$ nmcli con add con-name \"static-eth\" ifname enp43s0 type ethernet ip4 10.223.1.10/16\n$ nmcli con up \"static-eth\"\n</code></pre> Now take down the other connections, for example a connection <code>ens32</code> is shown below: <pre><code>$ nmcli con show\nNAME         UUID                 TYPE           DEVICE\nenp43s0      ff9804db5-........   802-3-ethernet --\nstatic-eth   a4b59cb4a-........   802-3-ethernet ens32\n\n$ nmcli con down enp43s0\n</code></pre> Note that your device will likely lose internet access unless you happen to have a gateway on 10.223.x.x/16 subnet. To restore your default connection, use <code>nmcli</code> to take down the static connection and restore the original. For example: <pre><code>$ nmcli con down static-eth\n$ nmcli con up enp43s0\n</code></pre></p> <p>Note</p> <p>If you do not know the IP address of your system, you can use the configuration IP \"backdoor\" alias of 192.168.154.0/24 to access the system. Ensure your host system is in the 192.168.0.0/24 subnet (any valid IP address not equal to 192.168.154.0 will work). Please refer to the instructions above for how to change your host IP address.</p>"},{"location":"echopilot_ai/#board-components-and-connectors","title":"Board Components and Connectors","text":""},{"location":"echopilot_ai/#echopilot-ai-mainboard","title":"EchoPilot AI Mainboard","text":""},{"location":"echopilot_ai/#carrier-board","title":"Carrier Board","text":""},{"location":"echopilot_ai/#pinouts","title":"Pinouts","text":"<p>For EchoPilot AI Mainboard Pinouts, refer to the EchoPilot AI Pinout Page.  </p> <p>For Standard Carrier Board Pinouts, refer to the Carrier Board Pinout Page.</p>"},{"location":"echopilot_ai/#jetson-io-availability","title":"Jetson IO Availability","text":"<p>The following Jetson IO pins are brought out to the B2B connector J5 and are available for customer use:</p> <p>Note</p> <p>*Changes to the direction and functionality of these pins may be possible based on the Jetson pinmux configuration.</p> Jetson Pin Direction B2B (J5) Voltage Default Use GPIO (Xavier) GPIO (Nano) PIN 211 O 36 +1.8V Audio MCLK AUDIO_MCLK AUDIO_MCLK PIN 124 IO 37 +1.8V GPIO O2 GPIO3_PQ.03 GPIO3_PH.06 PIN 218 IO 37 +3.3V* Iridium Ring GPIO3_PCC.04 GPIO3_PY.02 PIN 126 I 74 +3.3V* Iridium On/Off GPIO3_PCC.00 GPIO3_PI.02 PIN 206 I 73 +3.3V* Iridium Network Available GPIO3_PR.00 GPIO3_PV.00 <p>Note</p> <p>*Pins 126, 206 abd 130 are level-shifted from 1.8V to 3.3V prior to the B2B (J5) connector via a TXS0108ERGYR level translator.</p> <p>The following Jetson IO is used internally by the EchoPilot AI:</p> <p>Warning</p> <p>*Changes to the pinmux affecting these pins may break functionality.</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 87 I +1.8V Vbus Detect USB_VBUS_EN0 USB_VBUS_EN0 PIN 130 O +1.8V Camera Mux GPIO3_PCC.03 GPIO3_PI.00 PIN 212 I +1.8V M2 Alert GPIO3_PQ.01 GPIO3_PV.01 <p>The following Jetson IO pins are brought out to the FAN (J38) connector:</p> Jetson Pin Direction Voltage Use Pin Description (Xavier) Pin Description (Nano) PIN 230 O +5V Fan PWM GPIO3_PH.01 GPIO3_PE.07 PIN 208 I +5V Fan Tachometer GPIO3_PQ.02 GPIO3_PZ.02"},{"location":"echopilot_ai/#mechanical-drawings-and-step-files","title":"Mechanical Drawings and STEP Files","text":"With Carrier Board Attached EchoPilot AI without a Carrier Board Attached <p>EchoPilot AI 3D Model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI Universal Carrier Board 3D model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI PWM Breakout Board 3D model (STEP) File Download (right click, save link as)</p> <p>EchoPilot AI USB3 A Breakout Board 3D model (STEP) File Download (right click, save link as)</p>"},{"location":"echopilot_ai/#vibration-isolation","title":"Vibration Isolation","text":"<p>Many commercial autopilots use foam vibration isolation on a daughterboard containing the IMUs. You'll notice the EchoPilot AI does not use this type of design and the IMUs are mounted directly to the circuit board. The reason for this is that we feel better vibration isolation can be achieved (if required) by leveraging the mass of the entire EchoPilot system (carrier board, main board and Jetson SOM) rather than the very small mass of an IMU daughterboard. For the types of vibrations encountered by large-prop multi-rotors and piston-based engines (50-90 Hz), the total mass of the EchoPilot system mounted on vibration silicone isolators or wire rope isolators are very effective. This design has the added benefits of protecting critical electronics from exposure to continuous vibrations.  </p> <p>An example of a typical vibration isolation mount is shown below:</p> <p> </p> EchoPilot AI Vibration Mount <p>Note</p> <p>Note that for small and medium multi-rotors and electric planes, electric quadplanes and other vehicle types, vibration isolation is very rarely needed. </p>"},{"location":"echopilot_ai/#using-an-nvme-ssd","title":"Using an NVMe SSD","text":"<p>The EchoPilot AI includes an M.2 Key-M slot for a size 2230 NVMe SSD. We recommend a PCIe Gen. 4 NVMe SSD, such as the Western Digital SN740 (SDDPTQD-1T00), Western Digital Industrial Series (SDBPTPZ-1T00-XI) or Kingston OM3PGP41024P-A0 for applications in the 0-70\u00b0C range. Please be aware that most consumer NVMe SSDs have a commercial temperature rating (0-70\u00b0C). We recommend industrial rated devices for high-risk or high-valued use in uncrewed systems.</p> <p>The NVMe is power by a dedicated supply, 3A. </p> <p>To add an NVMe SSD to an EchoPilot system, first power off the system and install the SSD using a M2x3mm wafer head screw. </p> <p> </p> Install the 2230 NVMe drive and secure with an M2x3 wafer head screw <p>Power on the sytem and gain console access.</p> <p>Identify the NVMe SSD using: <pre><code>sudo fdisk -l\n</code></pre></p> <p>Create a partiaion table using: <pre><code>sudo parted /dev/nvme0n1 mklabel gpt\n</code></pre></p> <p>Create a new partition on the NVMe SSD: <pre><code>sudo parted -a optimal /dev/nvme0n1 mkpart primary ext4 0% 100%\n</code></pre></p> <p>Format the newly created partition: <pre><code>sudo mkfs.ext4 /dev/nvme0n1p\n</code></pre></p> <p>Create a mount point directory: <pre><code>sudo mkdir /mnt/nvme\n</code></pre></p> <p>Mount the NVMe SSD partition to the mount point directory: <pre><code>sudo mount /dev/nvme0n1p1 /mnt/nvme\n</code></pre></p> <p>Verify the NVMe SSD is mounted correctly by checking the file system: <pre><code>df -h\n</code></pre></p>"},{"location":"echopilot_ai/#unique-board-identifier","title":"Unique Board Identifier","text":"<p>Each EchoPilot AI includes an AT24CS01-STUM unique ID EEPROM attached to the Jetson I2C 1 port at address 0x58. This can be used to obtain a unique 128-bit identifier (serial number) for your board. </p> <p>Below is an example python script you can use to read this serial number.</p> <p>First install python3 wih smbus <pre><code>sudo apt-get install python3-smbus\n</code></pre> Create a new file <code>serial.py</code> with these contents: <pre><code>import smbus\nimport sys\n\n# usage, pass the i2c bus as the first argument, e.g. python3 serial_number 0\n\ni2c_ch = int(sys.argv[1]) \n\n# address on the I2C bus\ni2c_address = 0x58\n\n# Register address\nserial_num = 0x80\n\n# Read serial number register\ndef read_serial():\n\n    # Read the serial register, a 16 byte block\n    val = bus.read_i2c_block_data(i2c_address, serial_num, 16)    \n    return val\n\n# Initialize I2C (SMBus)\nbus = smbus.SMBus(i2c_ch)\n\ntry:\n    # Print out the serial number\n    print(bytes(read_serial()).hex())\n\nexcept:\n    pass\n</code></pre> You can then run the script using below, where the argument is the system's i2c bus. This may vary from different Jetson modules, but will most often by 0 or 1. <pre><code>sudo python3 serial.py 0\n</code></pre></p>"},{"location":"echopilot_ai/#configure-the-network","title":"Configure the Network","text":"<p>The EchoPilot AI has two 100Mbps Ethernet ports (ETH1 and ETH2). Upstream, these go to a network switch, so either one can be used to access the Jetson SOM. To interface using a standard RJ45 cable, use the included Ethernet adapter board and cable assembly connected as shown below. The make your own cable assembly, refer to the Pinout</p> <p> </p> To connect a standard RJ45 network cable, use the adapter as shown <p>EchoMAV's standard provisioning sets the Jetson module to a static IP address provided on the label with the device. There is also an alias ip of 192.168.253.0 which can be used if you do not know the static IP. </p>"},{"location":"echopilot_ai/#configuring-for-dhcp","title":"Configuring for DHCP","text":"<p>If you wish to use DHCP, follow the instructions below:</p> <p>First gain console access via the USB connector. Once logged in via the console, modify the existing static connection (e.g. \"static-eth0\") to be DHCP: <pre><code>sudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> If the network connection is plugged into a DHCP server, the system will now get an IP address. You can confirm with:  <pre><code>ip addr\n</code></pre></p>"},{"location":"echopilot_ai/#configuring-a-static-ip-address","title":"Configuring a Static IP Address","text":"<p>If you do not have a DHCP server, or you wish to assign a static IP address to the Jetson, follow the instructions below.</p> <p>First gain console access via the USB connector. Once logged in via the console, delete the default connection, for example \"Wired connection 1\": <pre><code>sudo nmcli c delete \"Wired connection 1\"\n</code></pre> Set up a static connection called <code>static-eth0</code> with an IP of 10.223.1.10, a netmask of 255.255.0.0 and a gateway of 10.223.1.1. The values are just examples, please adjust to the desired settings for your network. <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 10.223.1.10/16 gw4 10.223.1.1\n</code></pre> Bring up the new interface <pre><code>sudo nmcli c up static-eth0\n</code></pre> To verify network connectivity, ping another device on the network, or to verify internet connectivity, ping a Google DNS server: <pre><code>ping 8.8.8.8\n</code></pre></p>"},{"location":"echopilot_ai/#other-networkmanager-tips-and-tricks","title":"Other NetworkManager tips and tricks","text":"<p>Linux for Tegra uses networkmanager (<code>nmcli</code>) for its network interfaces. Below you will find a few commands for common network tasks. These examples are not intended for you to follow sequentially, these are common examples which will demonstrate most network configuration needs.</p> <p>Show connections:   <code>nmcli con show</code></p> <p>Example: Delete the default connection (\"Wired connection 1\") and set up a static connection called <code>static-eth0</code> with an IP of 172.20.1.100, a netmask of 255.255.0.0 and a gateway of 172.20.2.100:   <pre><code>sudo nmcli c delete \"Wired connection 1\"\nsudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.1.20/16 gw4 172.20.2.100\nsudo nmcli c up static-eth0\n</code></pre></p> <p>Example: Change IP address of <code>static-eth0</code> connection to <code>192.168.1.4</code> with a 255.255.0.0 (/16) netmask:   <pre><code>sudo nmcli con mod static-eth0 ipv4.address 192.168.1.1/16\n</code></pre></p> <p>Example: Change the gateway of <code>static-eth0</code> connection to <code>192.168.1.1</code>:   <pre><code>sudo nmcli con mod static-eth0 ipv4.gateway 192.168.1.1\n</code></pre></p> <p>Example: Change the DNS of <code>static-eth0</code> connection to <code>8.8.8.8</code>:      <pre><code>sudo nmcli con mod static-eth0 ipv4.dns \"8.8.8.8\"\n</code></pre></p> <p>Example: Take down/up of <code>static-eth0</code>:     <pre><code>sudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> Example: Delete the <code>static-eth0</code> connection:   <pre><code>sudo nmcli c delete \"static-eth0\"\n</code></pre></p> <p>Example: Add a new connection called <code>static-eth0</code> with IP <code>172.20.2.22/16</code> and gateway <code>172.20.2.100</code> on interface <code>eth0</code>:   <pre><code>sudo nmcli c add con-name static-eth0 ifname eth0 type ethernet ip4 172.20.2.22/16 gw4 172.20.2.100\n</code></pre></p> <p>Example: Add a persistent route so that multicast traffic to 224.x.x.x goes to the <code>static-eth0</code> connection: <pre><code>sudo nmcli con mod static-eth0 +ipv4.routes \"224.0.0.0/8\"\n</code></pre></p> <p>Example: Change the static-eth0 connection to remove static IP and enable DHCP (In this case, it would be clearer to delete the connection since it is named <code>static-eth0</code> and call it something else, but for edification: <pre><code>sudo nmcli con mod static-eth0 ipv4.address \"\"\nsudo nmcli con mod static-eth0 ipv4.gateway \"\"\nsudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con reload static-eth0\n</code></pre></p>"},{"location":"echopilot_ai/#configuring-can-on-the-jetson","title":"Configuring CAN on the Jetson","text":"<p>These instructions are a work in progress and may not be fully correct.  </p> <p>Modify <code>/etc/modprobe.d/denylist-mttcan.conf</code> and ensure the line <code>blacklist mttcan</code> is commented out. Reboot, then log in again and run <code>sudo modprobe mttcan</code>.</p>"},{"location":"echopilot_ai/#streaming-telemetry-from-the-autopilot-detailed","title":"Streaming Telemetry from the Autopilot (Detailed)","text":"<p>The autopilot has a high-speed serial interface between the FMU/STM32H7 and the Jetson SOM. The Jetson UART1 (pins 203, 205) is connected to the autopilot's UART2. If EchoMAV has provisioned your board, or if you are using our Board Support Package, then the default parameters will be set automatically if you build the PX4 or Ardupilot firmware. However, to understand what parameters are used to enable MAVLink data flow between the FMU and Jetson, note the parameters used below. In both cases, you are enabling the autopilot serial port to receive MAVLink2 data and setting the baud rate to the appropriate value. A typical baud rate is <code>500000</code> kpbs, but you can use any baud rate you wish as long as the mavlink-router application sending/receiving MAVLink on the Jetson is configured to match. For factory provisioned devices, we set it to 500000.</p> <p>For example, on ArduPilot set the following params and reboot: <pre><code>SERIAL2_PROTOCOL: MAVLink2\nSERIAL2_BAUD: 500   ## 500,000 kbps\n</code></pre> For PX4, set the following params and reboot. <pre><code>MAV_1_CONFIG 102: Telem 2  ## Reboot after this change to expose additional parameters\nMAV_1_RATE: 0\nMAV_1_MODE 2: Onboard\nSER_TEL2_BAUD: 500000   ## Reboot after this change\n</code></pre></p> <p>On the Jetson side, UART1 is typically enumerated <code>/dev/ttyTHS0</code>, although it could vary with different Jetson modules including <code>/dev/ttyTHS1</code> and <code>/dev/ttyTHS2</code>.</p> <p>For using the EchoPilot AI to route MAVLink data over a network, we pre-install and recommend MAVLink Router. For modules configured at the factory, we now provide mavlink-router installed by default and is configured to push telemetry via UDP to <code>10.223.1.10:14550</code></p> <p>Should you need or want to install this independently, EchoMAV has an open-source installer which makes it easy to install MAVLink Router and configure it as a service which starts at boot. Please refer to the our installer repo https://github.com/EchoMAV/mavlink-router for instructions. </p> <p>If you use the install repo above, please refer to the instructions there for configuration of the UART and destination IP address. Specifically edit <code>etc\\mavlink-router\\main.conf</code> with the appropriate settings.</p> <p>If you have permission issues accessing <code>/dev/ttyTHSX</code>, please disable <code>nvgetty</code> and ensure you are a member of the <code>dialout</code> group, or just use our MAVLink Router Installer Repo along with <code>make install</code> and a reboot which sets these things up for you. Thes steps to disable <code>nvgetty</code> and add your account to the <code>dialout</code> group are shown below. <pre><code>sudo systemctl stop nvgetty\nsudo systemctl disable nvgetty\nsudo usermod -aG dialout $USER\n</code></pre></p> <p>Note</p> <p>Reboot to apply changes.</p>"},{"location":"echopilot_ai/#fmu-ports","title":"FMU Ports","text":"<p>The Flight Manamgenent Unit (FMU) is based on the FMUv5 design, and uses I2C, SPI and UART ports as defined in the table below.</p> Port Use Connector Assignement UART1 GPS Carrier Board J20 UART2 Telemetry to Jetson (Telem2) NA (internal) UART3 External/User (Telem1) Carrier Board J18 UART4 External/User (shifted to RS-232) Carrier Board J32 UART5 Not Used NA UART6 Remote ID NA (internal) UART7 External/User (Debug) EchoPilot J12 UART6 IO MCU NA (internal) SPI1 ICM42688P #1 and #2 NA (internal) SPI2 RM3100 and FRAM NA (internal) SPI3 Not Used NA SPI4 ICM42688P #3 and MS5611 #1 NA (internal) SPI5 External/User NA SPI6 MS5611 #2 NA (internal) I2C1 GPS/Compass Carrier Board J20 I2C2 External/User Carrier Board J25 I2C3 Not Used NA I2C4 Not Used NA"},{"location":"echopilot_ai/#can-termination","title":"CAN Termination","text":"<p>The 2 CAN connections from the FMU (CAN1 and CAN2) and the 1 from the Jetson are driven by LTC2875 transceivers and contain termination resistors at the drivers. Should you desire to remove these termination resistors (e.g., you want to place the EchoPilot AI in the middle of a CAN chain rather than at the end), refer to the following:  </p> CAN Resistor Label Notes FMU CAN1 R19 Near U4 and U45, size 0402 FMU CAN2 R9 Near U3, size 0402 JETSON CAN1 R95 Near U32, size 0402"},{"location":"echopilot_ai/#analog-input-to-the-fmu-voltagecurrent-sense","title":"Analog Input to the FMU (Voltage/Current Sense)","text":"<p>The EchoPilot AI FMU design provides 6 analog inputs to the STM32H743. Most often, these are used for voltage/current input for the battery systems onboard an uncrewed system. The Analog input pin mapping for each input is shown below. To use these inputs, change the parameters in ArduPilot or PX4 to the appropriate pins.</p> Input Name Carrier Board Connector STM32H743 Pin ArduPilot/PX4 Virtual Pin Voltage Sense 1 J13.2 PA0 16 Current Sense 1 J13.3 PA1 17 Voltage Sense 2 J13.4 PA2 14 Current Sense 2 J13.5 PA3 15 Spare ADC 1 J13.6 PC4 4 Spare ADC 2 J13.7 PA4 18"},{"location":"echopilot_ai/#ardupilot-setup-for-voltagecurrent","title":"ArduPilot Setup for Voltage/Current","text":"Parameter Value BATT_VOLT_PIN 16 BATT_CURR_PIN 17 BATT2_VOLT_PIN 14 BATT2_CURR_PIN 15"},{"location":"echopilot_ai/#px4-setup-for-voltagecurrent","title":"PX4 Setup for Voltage/Current","text":"Parameter Value BAT1_V_CHANNEL 16 BAT1_I_CHANNEL 17 BAT2_V_CHANNEL 14 BAT2_I_CHANNEL 15"},{"location":"echopilot_ai/#remote-id-subsystem","title":"Remote ID Subsystem","text":"<p>The Remote ID system is based on an ESP32-C3 and is designed to work with the ArduRemoteID project and Open Drone ID standards.</p> <p>ArduRemoteID is is an implementation of a MAVLink and DroneCAN OpenDroneID transmitter. It aims to provide a transmitter solution for the FAA standard RemoteID requirement, meeting the transmitter component of the ASTM F3586-22 Means of Compliance. It also aims to be compliant with the RemoteID regulation in the EU.</p> <p>It is the responsibility of the user to configure the ArduRemoteID firmware in a way that it is compliant with the local RemoteID regulation. For instance, in the USA it is mandatory that UAV manufacturers submit a DoC (Declaration of Conformance) to the FAA where they state that their product is compliant with the RemoteID regulation.</p> <p>To flash ArduRemote ID to the ESPS32-C3, you will need a TC2030-USB-NL cable from tag-connect.com and follow the flashing instructions from the AruRemoteID project.</p> <p>The ESP32-C3 is connected to the FMU via UART6, aka Telem3 (pins PG9 (RX) and PG14 (TX) from the STM32H742). You will need to configure ArduPilot/PX4 to use this UART for RemoteID.</p> <p>For building ArduRemoteID for the EchoPilot AI, the following pins will need to be defined for the hardware: <pre><code>#define PIN_UART_TX 4\n#define PIN_UART_RX 5\nWS2812_LED_PIN GPIO_NUM_8\n</code></pre></p>"},{"location":"echopilot_ai_pinout/","title":"EchoPilot AI Pinout","text":""},{"location":"echopilot_ai_pinout/#echopilot-ai-pinout","title":"EchoPilot AI Pinout","text":""},{"location":"echopilot_ai_pinout/#top-side-echopilot-ai","title":"Top Side EchoPilot AI","text":""},{"location":"echopilot_ai_pinout/#debug-power-in-j8","title":"Debug Power In (J8)","text":"<p>This connector is not normally used. It exists only to power the EchoPilot AI without a carrier board attached.</p> <p>Connector: J8, Part Number: NA Mating Connector: NA, 2.54mm spacing, 0.8mm holes</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND Ground PIN 2 Pwr IN +5.2V Debug Power"},{"location":"echopilot_ai_pinout/#fmu-debug-j12","title":"FMU Debug (J12)","text":"<p>This connector is not normally used by the customer. It is primarily used during board setup to load bootloader firmware on the FMU. It is however possible to use the UART7 lines for other purposes.</p> <p>Connector: J12, Part Number: SM06B-SRSS-TB(LF)(SN) Mating Connector: SHR-06V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr OUT +3.3V 3.3V Power PIN 2 O +3.3V FMU UART7 TX PIN 3 I +3.3V FMU UART7 RX PIN 4 IO +3.3V FMU SWDIO PIN 5 O +3.3V FMU SWCLK PIN 6 Pwr GND Gnd"},{"location":"echopilot_ai_pinout/#esp32-remote-id-programdebug-j11","title":"ESP32 (Remote ID) Program/Debug (J11)","text":"<p>This connector is used to flash new firmware to the ESP32 for the RemoteID subsystem.</p> <p>Connector: J11, Part Number: NA Mating Connector/Cable: Tag Connect TC2030-USB-NL</p> Pin Number Direction Voltage Pin Description PIN 1 NA NA NC PIN 2 NA NA NC PIN 3 IO Diff Signal USB D- PIN 4 IO Diff Signal USB D+ PIN 5 Pwr GND Gnd PIN 6 NA NA NC"},{"location":"echopilot_ai_pinout/#fan-j38","title":"FAN (J38)","text":"<p>This connector is used to connect the fan from active heatsinks from ConnectTech.com</p> <p>Connector: J38, Part Number: 0530470410 Mating Connector: 0510210400</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND Gnd PIN 2 Pwr OUT +5V Fan Power PIN 3 I +5V Fan Tachometer Signal PIN 4 O +5V Fan PWM Signal"},{"location":"echopilot_ai_pinout/#fmu-usb-j7","title":"FMU USB (J7)","text":"<p>This is a USB-C connector following USB 2.0 specifications. It provides access to the autopilot (FMU) via the main STM32H7 processor. Connect to this port for configuration of the autopilot or autopilot firmware updates.</p> <p>Connector: J7, Part Number: 1054500101 Mating Connector: USB-C 2.0 compliant cable. </p>"},{"location":"echopilot_ai_pinout/#jetson-usb-console-j15","title":"Jetson USB Console (J15)","text":"<p>This is a USB-C connector providing console UART access to the Jetson SOM via an FTDI FT231XQ-R USB to Serial converter.</p> <p>Connector: J15, Part Number: 1054500101 Mating Connector: USB-C 2.0 compliant cable.</p>"},{"location":"echopilot_ai_pinout/#fmu-sd-card-j10","title":"FMU SD Card (J10)","text":"<p>MicroSD card for logging from the FMU.</p> <p>Connector: J10, Part Number: 5025700893 Mating Connector: MicroSD Card</p>"},{"location":"echopilot_ai_pinout/#bottom-side-echopilot-ai","title":"Bottom Side EchoPilot AI","text":""},{"location":"echopilot_ai_pinout/#board-to-board-jetson-j5","title":"Board to Board Jetson (J5)","text":"<p>This connector handles the Jetson-related board to board signals between the EchoPilot AI and a carrier board.</p> <p>Connector: J5, Part Number: FX23L-80S-0.5SV Mating Connector: FX23L-80P-0.5SV10 (10mm standoff, also available in 10 and 12mm)  </p> <p></p> Pin Number Direction Voltage Pin Desription 1 IO Diff Signal Jetson CAN+ 2 IO Diff Signal Jetson CAN- 3 Pwr GND GND 4 IO 1.8V CAM0_SDA0 5 IO 1.8V CAM0_SCL0 6 IO 1.8V CAM0_MCLK 7 IO 1.8V CAM0_GPIO 8 Pwr GND GND 9 IO Diff Signal CAM0_D1+ 10 IO Diff Signal CAM0_D1- 11 Pwr GND GND 12 IO Diff Signal CAM0_CLK+ 13 IO Diff Signal CAM0_CLK- 14 Pwr GND GND 15 IO Diff Signal CAM0_D0+ 16 IO Diff Signal CAM0_D0- 17 Pwr GND GND 18 IO 1.8V CAM1_SDA0 19 IO 1.8V CAM1_SCL0 20 IO 1.8V CAM1_MCLK 21 IO 1.8V CAM1_GPIO 22 Pwr GND GND 23 IO Diff Signal CAM1_D1+ 24 IO Diff Signal CAM1_D1- 25 Pwr GND GND 26 IO Diff Signal CAM1_CLK+ 27 IO Diff Signal CAM1_CLK- 28 Pwr GND GND 29 IO Diff Signal CAM1_D0+ 30 IO Diff Signal CAM1_D0- 31 Pwr GND GND 32 IO 1.8V I2S0_DOUT 33 IO 1.8V I2SO_DIN 34 IO 1.8V I2SO_FS 35 IO 1.8V I2SO_SCLK 36 IO 1.8V AUDIO_MCLK 37 IO 1.8V GPIO12 38 IO 1.8V GPIO10 39 Pwr GND GND 40 O 3.3V IRIDIUM RX UART 41 IO Diff Signal ETH1 TX- 42 IO Diff Signal ETH1 TX+ 43 IO Diff Signal ETH1 RX- 44 IO Diff Signal ETH1 RX+ 45 Pwr GND GND 46 IO Diff Signal ETH2 RX+ 47 IO Diff Signal ETH2 RX- 48 IO Diff Signal ETH2 TX+ 49 IO Diff Signal ETH2 TX- 50 Pwr GND GND 51 IO Diff Signal USB3SS RX+ 52 IO Diff Signal USB3SS RX- 53 Pwr GND GND 54 IO Diff Signal USB3SS TX+ 55 IO Diff Signal USB3SS TX- 56 Pwr GND GND 57 Pwr 5V USB2.0_3 VBUS 58 IO Diff Signal USB3SS D+ 59 IO Diff Signal USB3SS D- 60 Pwr GND GND 61 Pwr 5V VBUS3 62 IO Diff Signal USB_3 D+ 63 IO Diff Signal USB_3 D- 64 Pwr GND GND 65 Pwr 5V VBUS2 66 IO Diff Signal USB_2 D+ 67 IO Diff Signal USB_2 D- 68 Pwr GND GND 69 Pwr OUT 5V VBUS1 70 IO Diff Signal USB_1 D+ 71 IO Diff Signal USB_1 D- 72 Pwr GND GND 73 I 3.3V IRIDIUM NA 74 I 3.3V IRIDIUM RING 75 I 3.3V IRIDIUM TX UART 76 O 3.3V IRIDIUM ON/OFF 77 IO 1.8 JETSON I2C SDA 78 O 1.8 JETSON I2C SCL 79 IO 1.8 JETSON GPIO 02 80 Pwr OUT 3.3 +3.3V OUT 81 Pwr IN 5.2 +5.2V 82 Pwr IN 5.2 +5.2V 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_ai_pinout/#board-to-board-fmu-j6","title":"Board to Board FMU (J6)","text":"<p>This connector handles the FMU-related board to board signals between the EchoPilot AI and a carrier board.</p> <p>Connector: J5, Part Number: FX23L-80S-0.5SV Mating Connector: FX23L-80P-0.5SV8 (8mm standoff, also available in 10 and 12mm)  </p> <p></p> Pin Number Direction Voltage Pin Desription 1 0 3.3V FMW PWM CH6 2 O 3.3V FMW PWM CH5 3 O 3.3V FMW PWM CH4 4 O 3.3V FMW PWM CH3 5 O 3.3V FMW PWM CH2 6 O 3.3V FMW PWM CH1 7 O 3.3V IO PWM CH1 8 O 3.3V IO PWM CH2 9 O 3.3V IO PWM CH3 10 O 3.3V IO PWM CH4 11 O 3.3V IO PWM CH5 12 O 3.3V IO PWM CH6 13 O 3.3V IO PWM CH7 14 O 3.3V IO PWM CH8 15 Pwr GND GND 16 Pwr GND GND 17 Pwr OUT +5V +5V OUT  (PROTECTED) 18 O 3.3V FMU I2C_2 SCL 19 IO 3.3V FMU I2C_2 SDA 20 Pwr GND GND 21 Pwr OUT +5V +5V OUT (PROTECTED) 22 IO Diff Signal CAN 2+ 23 IO Diff Signal CAN 2- 24 Pwr GND GND 25 Pwr OUT +5V +5V OUT (PROTECTED) 26 IO Diff Signal CAN 1+ 27 IO Diff Signal CAN 1- 28 Pwr GND GND 29 Pwr OUT +5V +5V OUT (PROTECTED) 30 O +3.3V TELEM1_RTS 31 I +3.3V TELEM1_CTS 32 I +3.3V TELEM1_RX 33 O +3.3V TELEM1_TX 34 Pwr GND GND 35 I 3.3V BATTERY CURRENT SENSE 36 I 3.3V BATTERY VOLTAGE SENSE 36 Pwr GND GND 38 I +3.3V +VSERVO SENSE 39 Pwr GND GND 40 NA NA NC 41 Pwr OUT Pwr +5V OUT (PROTECTED) 42 O +3.3V SPI5 SCLK 43 I +3.3V SPI5 MISO 44 I Diff Signal SPI5_MOSI 45 O +3.3V SPI5 CS1  (PI4) 46 O +3.3V SPI5 CS2 (PI10) 47 Pwr GND GND 48 Pwr OUT +5V +5V OUT (PROTECTED) 49 O +3.3V GPS1 TX 50 I +3.3V GPS1 RX 51 O 3.3V FMU I2C_1 SCL 52 IO 3.3V FMU I2C_1 SDA 53 Pwr GND GND 54 I +3.3V SAFETY SWITCH IN 55 O +3.3V SAFETY SWITCH LED OUT 56 Pwr OUT +3.3V +3.3V OUT (SAFETY) 57 O +5V BUZZER OUT 58 Pwr GND GND 59 Pwr OUT +5V +5 VOUT (PROTECTED) 60 I +3.3V RC INPUT 61 Pwr GND GND 62 Pwr IN +5.4V +5.4V IN FMU 63 Pwr IN +5.4V +5.4V IN FMU 64 Pwr IN +5.4V +5.4V IN FMU 65 Pwr IN +5.4V +5.4V IN FMU 66 Pwr GND GND 67 Pwr GND GND 68 Pwr GND GND 69 Pwr GND GND 70 I +3.3V VDD POWER A VALID 71 I +3.3V VDD POWER B VALID 72 O +3.3V SBUS OUTPUT 73 O 3.3V FMU UART4 TX 74 I 3.3V FMU UART4 RX 75 Pwr GND GND 76 I 3.3V BATTERY2 CURRENT SENSE 77 I 3.3V BATTERY2 VOLTAGE SENSE 78 I 3.3V SPARE ADC1 79 I 3.3V SPARE ADC2 80 NA NA NC 81 Pwr IN +5.2V +5.2V (JETSON POWER) 82 Pwr IN +5.2V +5.2V (JETSON POWER) 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_ai_pinout/#io-debug-j13","title":"IO Debug (J13)","text":"<p>This connector is not normally used by the customer. It is used during board setup to load bootloader firmware on the IOMCU.</p> <p>Connector: J13, Part Number: SM06B-SRSS-TB(LF)(SN) Mating Connector: SHR-06V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr Out +3.3V 3.3V Power PIN 2 O +3.3V IOMCU UART1 TX PIN 3 I +3.3V IOMCU UART1 RX PIN 4 IO +3.3V IOMCU SWDIO PIN 5 O +3.3V IOMCU SWCLK PIN 6 Pwr GND Gnd"},{"location":"echopilot_ai_pinout/#jetson-debug-j25","title":"Jetson Debug (J25)","text":"<p>This connector is used to flash new firmware to the Jetson SOM.</p> <p>Connector: J25, Part Number: 629105150521  Mating Connector: MicroUSB Cable</p>"},{"location":"echopilot_ai_pinout/#nvme-ssd-m2-slot-j14","title":"NVMe SSD M.2 Slot (J14)","text":"<p>M.2 connector, for use with size 2230 NVMe Solid State Drives. </p> <p>Connector: J14, Part Number: MDT420M01001  Mating Connector: 2230 M.2 Key M</p>"},{"location":"echopilot_carrier_pinout/","title":"EchoPilot Carrier Pinout","text":"<p>The Carrier Board is open-source, please visit the echopilot_ai_carrier repository. While you may refer to the pinout information below, also feel free to examine the pdf schematic or the full design in Kicad 7.0+.  </p>"},{"location":"echopilot_carrier_pinout/#carrier-board-schematic","title":"Carrier Board Schematic","text":"<p>A full schematic of the carrier board is available: PDF schematic </p>"},{"location":"echopilot_carrier_pinout/#top-side-carrier-board","title":"Top Side Carrier Board","text":""},{"location":"echopilot_carrier_pinout/#iridium-rockblock-9603-j10","title":"Iridium Rockblock 9603 (J10)","text":"<p>This connector is for connection to a Rockblock Iridium 9603 modem. A straight-through cable with Molex 0510211000 connectors may be used. </p> <p>Connector: J10, Part Number: 0532617010 Mating Connector:  0510211000</p> Pin Number Direction Voltage Pin Desription 1 Pwr GND GND 2 NA NA NC 3 Pwr OUT +5V +5V_OUT3<sup>3</sup> 4 O 3.3V Iridium On/Off 5 I 3.3V TX (from modem's perspective) 6 I 3.3V Iridium Ring 7 I 3.3V Iridium Network Available 8 NA NA NC 9 NA NA NC 10 O 3.3V RX (from modem's perspective) <p>Note</p> <p>Custom software is required to implement Iridium SBD communications. Pinmux modifications may be required pending how a software implementation leverages the Iridium modem IO.</p>"},{"location":"echopilot_carrier_pinout/#ethernet-2-j9","title":"Ethernet 2 (J9)","text":"<p>This connector is used for Ethernet (100 Mbps to the Jetson). This is connected to a KSZ8795CLXIC 4-port ethernet switch onboard the EchoPilot AI.</p> <p>Note</p> <p>The magnetics for Ethernet 2 are onboard the Carrier Board.</p> <p>Connector: J9, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S</p> Pin Number Direction Voltage Pin Description 1 IO Diff Signal Rx+ 2 IO Diff Signal Rx- 3 IO Diff Signal Tx+ 4 IO Diff Signal Tx-"},{"location":"echopilot_carrier_pinout/#ethernet-1-j15","title":"Ethernet 1 (J15)","text":"<p>This connector is used for Ethernet (100 Mbps to the Jetson). This is connected to a KSZ8795CLXIC 4-port ethernet switch onboard the EchoPilot AI.</p> <p>Note</p> <p>The magnetics for Ethernet 1 are onboard the Carrier Board.</p> <p>Connector: J15, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S</p> Pin Number Direction Voltage Pin Description 1 IO Diff Signal Rx+ 2 IO Diff Signal Rx- 3 IO Diff Signal Tx+ 4 IO Diff Signal Tx-"},{"location":"echopilot_carrier_pinout/#board-to-board-jetson-j5","title":"Board to Board Jetson (J5)","text":"<p>This connector handles the Jetson-related board to board signals. It connects to the EchoPilot AI board.  </p> <p>Connector: J5, Part Number: FX23L-80P-0.5SV10 Mating Connector: FX23L-80S-0.5SV  </p> Pin Number Direction Voltage Pin Desription 1 IO Diff Signal Jetson CAN+ 2 IO Diff Signal Jetson CAN- 3 Pwr GND GND 4 IO 1.8V CAM0_SDA0 5 IO 1.8V CAM0_SCL0 6 IO 1.8V CAM0_MCLK 7 IO 1.8V CAM0_GPIO 8 Pwr GND GND 9 IO Diff Signal CAM0_D1+ 10 IO Diff Signal CAM0_D1- 11 Pwr GND GND 12 IO Diff Signal CAM0_CLK+ 13 IO Diff Signal CAM0_CLK- 14 Pwr GND GND 15 IO Diff Signal CAM0_D0+ 16 IO Diff Signal CAM0_D0- 17 Pwr GND GND 18 IO 1.8V CAM1_SDA0 19 IO 1.8V CAM1_SCL0 20 IO 1.8V CAM1_MCLK 21 IO 1.8V CAM1_GPIO 22 Pwr GND GND 23 IO Diff Signal CAM1_D1+ 24 IO Diff Signal CAM1_D1- 25 Pwr GND GND 26 IO Diff Signal CAM1_CLK+ 27 IO Diff Signal CAM1_CLK- 28 Pwr GND GND 29 IO Diff Signal CAM1_D0+ 30 IO Diff Signal CAM1_D0- 31 Pwr GND GND 32 IO Diff Signal CAM2_D2+ 33 IO Diff Signal CAM2_D2- 34 Pwr GND GND 35 IO Diff Signal CAM0_D3+ 36 IO Diff Signal CAM0_D3- 37 IO 1.8V I2SO_DIN 38 IO 1.8V nMOD_SLEEP 39 IO 1.8V SLEEP/WAKE 40 IO 1.8V I2SO_FS 41 IO Diff Signal ETH0 TX- 42 IO Diff Signal ETH0 TX+ 43 IO Diff Signal ETH0 RX- 44 IO Diff Signal ETH0 RX+ 45 Pwr GND GND 46 IO Diff Signal ETH2 RX+ 47 IO Diff Signal ETH2 RX- 48 IO Diff Signal ETH2 TX+ 49 IO Diff Signal ETH2 TX- 50 Pwr GND GND 51 IO Diff Signal JETSON USB3SS RX+ 52 IO Diff Signal JETSON USB3SS RX- 53 Pwr GND GND 54 IO Diff Signal JETSON USB3SS TX+ 55 IO Diff Signal JETSON USB3SS TX- 56 Pwr GND GND 57 Pwr OUT 5V USB3SS VBUS 58 IO Diff Signal JETSON USB3SS D+ 59 IO Diff Signal JETSON USB3SS D- 60 Pwr GND GND 61 Pwr OUT 5V VBUS3 62 IO Diff Signal USB_3 D+ 63 IO Diff Signal USB_3 D- 64 Pwr GND GND 65 Pwr 5V VBUS2 66 IO Diff Signal USB_2 D+ 67 IO Diff Signal USB_2 D- 68 Pwr GND GND 69 Pwr OUT 5V VBUS1 70 IO Diff Signal USB_1 D+ 71 IO Diff Signal USB_1 D- 72 Pwr GND GND 73 I 3.3V IRIDIUM RING 74 I 3.3V IRIDIUM RX UART 75 I 3.3V IRIDIUM TX UART 76 O 3.3V I2S0_SCLK 77 IO 1.8 JETSON I2C1_SDA 78 O 1.8 JETSON I2C1_SCL 79 Pwr OUT 3.3 JETSON GPIO 02 80 Pwr OUT 3.3 +3.3V OUT 81 Pwr IN 5.2 +5.2V 82 Pwr IN 5.2 +5.2V 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#pwm-output-from-fmu-j28","title":"PWM Output from FMU (J28)","text":"<p>This connector provides the PWM outputs from the FMU. The EchoPilot AI's autopilot hardware consist of a main processor (FMU) and an IO processor. The IO processor provides 8 PWM outputs (labeled IO CHX below) and the FMU provides 4 PWM outputs. An important distinction between the two is that only the FMU outputs are D-Shot compatible.  </p> <p>The +VServo Sense input is optional and is used by the FMU to detect a drop in the VServo rail. The EchoPilot AI has a 2:1 voltage divider onboard to protect input of up to 6.6V (3.3V * 2). This is an input only, the Carrier board does not provide power to the servo voltage rail. </p> <p>The EchoPilot AI comes with a PWM Breakout board which allows users to use standard Futaba-style (3 pin, 0.1\" spacing) servo connectors. The PWM Breakout Board is plugged into this connector with the supplied cable. </p> <p>Connector: J28, Part Number: SM14B-GHS-TB(LF)(SN) Mating Connector: GHR-14V-S</p> Pin Number Direction Voltage Pin Description 1 O +3.3 IO CH1 2 O +3.3 IO CH2 3 O +3.3 IO CH3 4 O +3.3 IO CH4 5 O +3.3 IO CH5 6 O +3.3 IO CH6 7 O +3.3 IO CH7 8 O +3.3 IO CH8 9 O +3.3 FMU CH1 10 O +3.3 FMU CH2 11 O +3.3 FMU CH3 12 O +3.3 FMU CH4 13 I +5V +VServo Sense (Optional) 14 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#board-to-board-fmu-j6","title":"Board to Board FMU (J6)","text":"<p>This connector handles the FMU-related board to board signals.  It connects to the EchoPilot AI board.  </p> <p>Connector: J6, Part Number: FX23L-80P-0.5SV10 Mating Connector: FX23L-80S-0.5SV   </p> Pin Number Direction Voltage Pin Desription 1 O 3.3V FMU PWM CH6 2 O 3.3V FMU PWM CH5 3 O 3.3V FMU PWM CH4 4 O 3.3V FMU PWM CH3 5 O 3.3V FMU PWM CH2 6 O 3.3V FMU PWM CH1 7 O 3.3V IO PWM CH1 8 O 3.3V IO PWM CH2 9 O 3.3V IO PWM CH3 10 O 3.3V IO PWM CH4 11 O 3.3V IO PWM CH5 12 O 3.3V IO PWM CH6 13 O 3.3V IO PWM CH7 14 O 3.3V IO PWM CH8 15 Pwr GND GND 16 Pwr GND GND 17 Pwr OUT +5V +5V OUT_1<sup>1</sup> 18 O 3.3V FMU I2C_2 SCL 19 IO 3.3V FMU I2C_2 SDA 20 Pwr GND GND 21 Pwr OUT +5V +5V OUT_1<sup>1</sup> 22 IO Diff Signal FMU CAN 2+ 23 IO Diff Signal FMU CAN 2- 24 Pwr GND GND 25 Pwr OUT +5V +5V OUT_1<sup>1</sup> 26 IO Diff Signal FMU CAN 1+ 27 IO Diff Signal FMU CAN 1- 28 Pwr GND GND 29 Pwr OUT +5V +5V OUT_1<sup>1</sup> 30 O +3.3V TELEM1_RTS 31 I +3.3V TELEM1_CTS 32 I +3.3V TELEM1_RX 33 O +3.3V TELEM1_TX 34 Pwr GND GND 35 I 3.3V BATTERY CURRENT SENSE1 36 I 3.3V BATTERY VOLTAGE SENSE1 36 Pwr GND GND 38 I +3.3V +VSERVO SENSE 39 Pwr GND GND 40 NA NA NC 41 Pwr OUT Pwr +5V OUT_1<sup>1</sup> 42 O +3.3V SPI5 SCLK 43 I +3.3V SPI5 MISO 44 I Diff Signal SPI5_MOSI 45 O +3.3V SPI5 CS1  (PI4) 46 O +3.3V SPI5 CS2 (PI10) 47 Pwr GND GND 48 Pwr OUT +5V 5V OUT_1<sup>1</sup> 49 O +3.3V GPS1 TX 50 I +3.3V GPS1 RX 51 O 3.3V FMU I2C_1 SCL 52 IO 3.3V FMU I2C_1 SDA 53 Pwr GND GND 54 I +3.3V SAFETY SWITCH IN 55 O +3.3V SAFETY SWITCH LED OUT 56 Pwr OUT +3.3V +3.3V OUT 57 O +5V BUZZER OUT 58 Pwr GND GND 59 Pwr OUT +5V +5V OUT_2<sup>2</sup> 60 I +3.3V RC INPUT 61 Pwr GND GND 62 Pwr IN +5.4V +5.4V IN FMU 63 Pwr IN +5.4V +5.4V IN FMU 64 Pwr IN +5.4V +5.4V IN FMU 65 Pwr IN +5.4V +5.4V IN FMU 66 Pwr GND GND 67 Pwr GND GND 68 Pwr GND GND 69 Pwr GND GND 70 I +3.3V VDD POWER A VALID 71 I +3.3V VDD POWER B VALID 72 O +3.3V S.BUS OUTPUT 73 O 3.3V FMU UART4 TX 74 I 3.3V FMU UART4 RX 75 Pwr GND GND 76 NA NA BATTERY CURRENT SENSE2 77 NA NA BATTERY VOLTAGE SENSE2 78 NA NA SPARE ADC1 79 NA NA SPARE ADC2 80 NA NA NC 81 Pwr IN +5.2V +5.2V (JETSON POWER) 82 Pwr IN +5.2V +5.2V (JETSON POWER) 83 Pwr GND GND 84 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#jetson-i2c1-j34","title":"+Jetson I2C1 (J34)","text":"<p>Jetson I2C1 </p> <p>Connector: J34, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V_OUT3<sup>3</sup> 2 Pwr +1.8B I2C_1 SCL 3 Pwr +1.8V I2C_1 SDA 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#5v-out-j11","title":"+5V Out (J11)","text":"<p>This connector provides a spare regulated +5V output.  </p> <p>Connector: J11, Part Number: SM02B-GHS-TB(LF)(SN) Mating Connector: GHR-02V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V_OUT3<sup>3</sup> 2 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#vbattery-j12","title":"+VBattery (J12)","text":"<p>This connector provides a spare raw battery voltage output (what is input to J27, XT30 power in). It is protected by a reverse polarity diode.</p> <p>Connector: J12, Part Number: SM02B-GHS-TB(LF)(SN) Mating Connector: GHR-02V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +VBATT +VBATT (unprotected) 2 Pwr OUT +VBATT +VBATT (unprotected) 3 Pwr GND GND 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#sbus-outrssi-in-j26","title":"S.Bus Out/RSSI In (J26)","text":"<p>This connector can be used for either S.BUS Output or RSSI Input.</p> <p>Connector: J26, Part Number: SM03B-GHS-TB(LF)(SN) Mating Connector: GHR-03V-S     </p> Pin Number Direction Voltage Pin Description 1 I +3.3V S.Bus Out / RSSI In 2 Pwr OUT +5V +5V OUT_1 <sup>1</sup> 3 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#gpscompass-j20","title":"GPS/Compass (J20)","text":"<p>This connector provides a Pixhawk standard GPS/Compass connection.</p> <p>Connector: J20, Part Number: SM10B-GHS-TB(LF)(SN) Mating Connector: GHR-10V-S   </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1<sup>1</sup> 2 O +3.3V GPS TX 3 I +3.3V GPS Rx 4 O +3.3V I2C 1 SCL 5 IO +3.3V I2C 1 SDA 6 I +3.3V Safety Switch In 7 O +3.3V Safety Switch LED Out 8 Pwr OUT +3.3V Safety VDD 3.3V 9 Pwr +5V Buzzer Out 10 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#jetson-can-j7","title":"Jetson CAN (J7)","text":"<p>This connector provides a CAN interface from the Jetson. The EchoPilot AI main board has a 120 ohm termination resistor at the CAN transceiver (LTC2875).</p> <p>Connector: J7, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_3 <sup>3</sup> 2 IO Diff Signal CAN+ (Jetson) 3 IO Diff Signal CAN- (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#power-in-j27","title":"Power In (J27)","text":"<p>This connector provides power input to the system. The power supply should be between 7-56 VDC and should be capable of supply up to 4A.</p> <p>Connector: J27, Part Number: XT30PW-M Mating Connector: XT30U-F  </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 Pwr IN +7-56VDC +V System Input"},{"location":"echopilot_carrier_pinout/#bottom-side-carrier-board","title":"Bottom Side Carrier Board","text":"<p>Note</p> <p>The MIPI CAM1 connector shown above does NOT match the Rev1B board, which features a smaller 22 pin 0.5mm FFC connector.</p>"},{"location":"echopilot_carrier_pinout/#nano-sim-card-j31","title":"Nano SIM Card (J31)","text":"<p>A Nano SIM card holder. Used only if a M.2 3052 Key B Cellular modem is attached to J30.</p>"},{"location":"echopilot_carrier_pinout/#mipi-cam-2-j14","title":"MIPI Cam 2 (J14)","text":"<p>This connector provides a CSI/MIPI Camera connection, following the Raspberry Pi 15-pin 1mm spacing FFC standard.</p> <p>Connector: J14, Part Number: 1-84952-5 Mating Connector: FFC Cable, 15 pos, 1mm pin spacing   </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 IO Diff Signal CAM1_D0- 3 IO Diff Signal CAM1_D0+ 4 Pwr GND GND 5 IO Diff Signal CAM1_D1- 6 IO Diff Signal CAM1_D1+ 7 Pwr GND GND 8 O Diff Signal CAM1_CLK- 9 O Diff Signal CAM1_CLK+ 10 Pwr GND GND 11 IO +3.3V CAM1_GPIO 12 O +3.3V CAM1_MCLK 13 O +3.3V CAM1_SCL0 14 IO +3.3V CAM1_SDAO 15 Pwr OUT +3.3V +3.3V"},{"location":"echopilot_carrier_pinout/#mipi-cam-1-j8","title":"MIPI Cam 1 (J8)","text":"<p>This connector provides a 4 Lane CSI/MIPI Camera connection, following the Raspberry Pi 22 0.5mm spacing FFC standard.</p> <p>Connector: J8, Part Number: 2-1734592-2 Mating Connector: FFC Cable, 22 pos, 0.5mm pin spacing   </p> Pin Number Direction Voltage Pin Description 1 Pwr GND GND 2 IO Diff Signal CAM0_D0- 3 IO Diff Signal CAM0_D0+ 4 Pwr GND GND 5 IO Diff Signal CAM0_D1- 6 IO Diff Signal CAM0_D1+ 7 Pwr GND GND 8 O Diff Signal CAM0_CLK- 9 O Diff Signal CAM0_CLK+ 10 Pwr GND GND 11 IO Diff Signal CAM0_D2- 12 IO Diff Signal CAM0_D2+ 13 Pwr GND GND 14 O Diff Signal CAM0_D3- 15 O Diff Signal CAM0_D3+ 16 Pwr GND GND 17 IO +3.3V CAM0_GPIO 18 O +3.3V CAM0_MCLK 19 Pwr GND GND 20 O +3.3V CAM0_SCL0 21 IO +3.3V CAM0_SDAO 22 Pwr OUT +3.3V +3.3V"},{"location":"echopilot_carrier_pinout/#radio-in-j16","title":"Radio In (J16)","text":"<p>This connector provides a optional radio input in to the autopilot. A wide range of radio protocols are supported. Please see here for example.</p> <p>Connector: J16, Part Number: SM03B-GHS-TB(LF)(SN)  Mating Connector: GHR-03V-S   </p> Pin Number Direction Voltage Pin Description 1 I +3.3V RC In 2 Pwr OUT +5V +5V OUT_2<sup>2</sup> 3 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#jetson-gpio-j33","title":"Jetson GPIO (J33)","text":"<p>Spare GPIO from the Jetson module.</p> <p>Connector: J33, Part Number: SM04B-GHS-TB(LF)(SN)  Mating Connector: GHR-04V-S   </p> Pin Number Direction Voltage Pin Description 1 IO +1.8V GPIO 02 2 IO +1.8V GPIO 10 3 IO +1.8V GPIO 12 3 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#vi-sense-and-analog-in-j13","title":"V/I Sense and Analog In (J13)","text":"<p>This connector provides dual voltage and current sense input, for use with off-board current sensor monitor(s). These signals should be scaled to 0-3.3V or damage may occur. Your autopilot firmware will allow you to enter scaling factors for proper display of voltage/current when ground control software. This connector also provides two spare analog inputs to the FMU.</p> <p>Connector: J13, Part Number: SM08B-GHS-TB(LF)(SN) Mating Connector: GHR-08V-S     </p> Pin Number Direction Voltage Pin Description STM32 Pin 1 Pwr +5.0V +5V Out NA 2 I +3.3V Voltage Sense1 PA0 3 I +3.3V Current Sense1 PA1 4 I +3.3V Voltage Sense2 PA2 5 I +3.3V Current Sense2 PA3 6 I +3.3V Spare ADC 1 PC4 7 I +3.3V Spare ADC 2 PA4 8 Pwr GND GND NA"},{"location":"echopilot_carrier_pinout/#i2c-2-fmu-j25","title":"I2C 2 (FMU) (J25)","text":"<p>This connector provides a Pixhawk standard I2C connection from the FMU (I2C 2).</p> <p>Connector: J25, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 <sup>1</sup> 2 O +3.3V I2C_2 SCL (FMU) 3 IO +3.3V I2C_2 SDA (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#telem1-j18","title":"Telem1 (J18)","text":"<p>This connector provides a Pixhawk standard TELEM connection from the FMU (TELEM1).</p> <p>Connector: J18, Part Number: SM06B-GHS-TB(LF)(SN) Mating Connector: GHR-06V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 <sup>1</sup> 2 O +3.3V Telem1 TX 3 I +3.3V Telem1 RX 4 O +3.3V Telem1 CTS 5 I +3.3V Telem1 RTS 6 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb3_2-j24","title":"USB3_2 (J24)","text":"<p>This connector provides a USB3 SuperSpeed connection to the Jetson, via a TUSB8042 hub. Note that 1uF capacitors are placed near the connector on the Tx+ and TX- lines.</p> <p>Connector: J24, Part Number: SM10B-GHS-TB(LF)(SN) Mating Connector: GHR-10V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V VBus 2 IO Diff Signal USB D- 3 IO Diff Signal USB D+ 4 Pwr GND GND 5 IO Diff Signal USBSS Rx- 6 IO Diff Signal USBSS Rx+ 7 Pwr GND GND 8 IO Diff Signal USBSS Tx- 9 IO Diff Signal USBSS Tx+ 10 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb3_1-j29","title":"USB3_1 (J29)","text":"<p>This connector provides a USB3 SuperSpeed connection to the Jetson, via a TUSB8042 hub. Note that 1uF capacitors are placed near the connector on the Tx+ and TX- lines.</p> <p>Connector: J29, Part Number: SM10B-GHS-TB(LF)(SN) Mating Connector: GHR-10V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V VBus 2 IO Diff Signal USB D- 3 IO Diff Signal USB D+ 4 Pwr GND GND 5 IO Diff Signal USBSS Rx- 6 IO Diff Signal USBSS Rx+ 7 Pwr GND GND 8 IO Diff Signal USBSS Tx- 9 IO Diff Signal USBSS Tx+ 10 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#insrs-232-fmu-uart-j32","title":"INS/RS-232 FMU UART (J32)","text":"<p>This connector provides an RS-232 level shifted UART from the FMU for connection to an external device, such as an Inertial Navigation System (INS).</p> <p>Connector: J132, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V_OUT4 <sup>4</sup> 2 IO Diff Signal RS232 TX, UART4 (FMU) 3 IO Diff Signal RS232 RX, UART4 (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#can-2-fmu-j17","title":"CAN 2 (FMU) (J17)","text":"<p>This connector provides a Pixhawk standard CAN connection from the FMU (CAN 2). The EchoPilot AI main board has a 120 ohm termination resistor at the CAN transceiver (LTC2875).</p> <p>Connector: J17, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 <sup>1</sup> 2 IO Diff Signal CAN 2+ (FMU) 3 IO Diff Signal CAN 2- (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#can-1-fmu-j19","title":"CAN 1 (FMU) (J19)","text":"<p>This connector provides a Pixhawk standard CAN connection from the FMU (CAN 1). The EchoPilot AI main board has a 120 ohm termination resistor at the CAN transceiver (LTC2875).</p> <p>Connector: J19, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V OUT_1 <sup>1</sup> 2 IO Diff Signal CAN 1+ (FMU) 3 IO Diff Signal CAN 1- (FMU) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb20-3-j23","title":"USB2.0 #3 (J23)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM via a hub onboard the EchoPilot AI mainboard.</p> <p>Connector: J23, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB3_D- (Jetson) 3 IO Diff Signal USB3_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb20-2-j22","title":"USB2.0 #2 (J22)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM via a hub onboard the EchoPilot AI mainboard.</p> <p>Connector: J22, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB2_D- (Jetson) 3 IO Diff Signal USB2_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#usb20-1-j21","title":"USB2.0 #1 (J21)","text":"<p>This connector provides USB 2.0 connectivity from the Jetson SOM via a hub onboard the EchoPilot AI mainboard.</p> <p>Connector: J21, Part Number: SM04B-GHS-TB(LF)(SN) Mating Connector: GHR-04V-S     </p> Pin Number Direction Voltage Pin Description 1 Pwr OUT +5V +5V VBUS (Protected 500mA) 2 IO Diff Signal USB1_D- (Jetson) 3 IO Diff Signal USB1_D+ (Jetson) 4 Pwr GND GND"},{"location":"echopilot_carrier_pinout/#m2-connector-for-cellular-modem-j30","title":"M.2 Connector for Cellular Modem (J30)","text":"<p>This is a Key B M.2 connector for use with a 3052 form factor cellular modem, such as the Sierra Wireless EM9191. The connector includes USB3.1 connectivity to the modem ( PCIe is not supported). Attach the modem using a M2x0.4mm x 3mm wafer head screw.  </p> <p>A heat pad under the modem provides the option for a heat sinking solution from the cellular modem. The following components can be used to build a heat sink:  </p> <p>Thermal Pad between the modem and Carrier Board: Panasonic EYG-T7070A15A (cut to fit): 14x14mm heatsink mounted on the Carrier Board: CUI HSB03-141406  Heatsink Adhesive: MG Chemicals 8329TFF-25ML </p> <p>Connector: J29, Part Number: SM3ZS067U310ABR1200 Mating Connector: M.2 Key B Modem, size 3052</p> <ol> <li> <p>5V_OUT1 bus is limited to a total of 500mA.\u00a0\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>5V_OUT2 bus is limited to a total of 500mA.\u00a0\u21a9\u21a9</p> </li> <li> <p>+5V_OUT3 bus is limited to a total of 1500mA by a TPS2561.\u00a0\u21a9\u21a9\u21a9\u21a9</p> </li> <li> <p>+5V_OUT4 bus is limited to a total of 1500mA by a TPS2561.\u00a0\u21a9</p> </li> </ol>"},{"location":"echopilot_pwm_pinout/","title":"EchoPilot PWM Pinout","text":""},{"location":"echopilot_pwm_pinout/#echopilot-pwm-breakout-board-pinout","title":"EchoPilot PWM Breakout Board Pinout","text":""},{"location":"echopilot_pwm_pinout/#echopilot-carrier-board-connector-j1","title":"EchoPilot Carrier Board Connector (J1)","text":"<p>This connector is used along with the provided cable to connect to J20 on the Carrier Board.</p> <p>Connector: J1, Part Number: SM14B-SRSS-TB(LF)(SN) Mating Connector: SHR-14V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND GND PIN 2 Pwr +5V +VServo Sense PIN 3 O +3.3V FMU (AUX) PWM CH4 PIN 4 O +3.3V FMU (AUX) PWM CH3 PIN 5 O +3.3V FMU (AUX) PWM CH2 PIN 6 O +3.3V FMU (AUX) PWM CH1 PIN 7 O +3.3V IO (MAIN) PWM CH8 PIN 8 O +3.3V IO (MAIN) PWM CH7 PIN 9 O +3.3V IO (MAIN) PWM CH6 PIN 10 O +3.3V IO (MAIN) PWM CH5 PIN 11 O +3.3V IO (MAIN) PWM CH4 PIN 12 O +3.3V IO (MAIN) PWM CH3 PIN 13 O +3.3V IO (MAIN) PWM CH2 PIN 14 O +3.3V IO (MAIN) PWM CH1"},{"location":"echopilot_pwm_pinout/#header-pwm-outputs","title":"Header PWM Outputs","text":"<p>This header is used to connect to Futaba-style servo connectors. The PWM outputs are broken up into two groups. To understand why, consider that the autopilot is based on two separate ICs: a primary controller (often referred to as \"the\" FMU) and an IO controller (IOMCU). The IOMCU provides the PWM output to MAIN CH1 - CH8, while the FMU directly handles AUX CH1 - CH4. The naming convention of MAIN and AUX come from previous Pixhawk designs, where the IOMCU outputs are historically (confusingly?) labeled \"MAIN.\" The outputs directly from the FMU are historically named \"AUX.\" At this point you might be asking yourself \"why do we need to ICs, this seems to just add confusion?\" There are two reasons why the EchoPilot uses an IOMCU (many autopilots do not): 1. It allows us to support up to 14 PWM outputs and 2. It provides a level of safety and redundancy because the IOMCU can allow core functionality (RC Control) even if the primary FMU fails or crashes. </p> <p>For most applications either group of outputs can be used. However, one important consideration between \"MAIN\" and \"AUX\" outputs are if you are using DShot if your system. DShot outputs are only supported by the FMU, therefore on the EchoPilot AI only the AUX outputs support DShot. With the stock Carrier board and PWM breakout board, 4 AUX outputs are available. The EchoPilotAI supports up to 6 AUX outputs via custom carrier board design.</p> <p>Warning</p> <p>The middle (\"+\") pin is bussed together, allowing you to distribute your +VServo voltage. The EchoPilot AI does NOT provide +VServo voltage, this must be supplied by an external regulator, BEC, etc. Typically +VServo is provided by an Electronic Speed Controller (ESC) in the system.</p> <p>Connector: J2, Part Number: TSW-112-08-G-T-RA_1 Mating Connector: Standard 0.1\" spacing servo/esc Futaba style</p> <p></p>"},{"location":"echopilot_pwm_pinout/#step-file-download","title":"STEP File Download","text":"<p>EchoPilot AI PWM Breakout Board 3D model (STEP) File Download (right click, save link as)</p>"},{"location":"echopilot_usba_pinout/","title":"EchoPilot USBA Pinout","text":""},{"location":"echopilot_usba_pinout/#echopilot-usb3-superspeed-breakout-board-pinout","title":"EchoPilot USB3 SuperSpeed Breakout Board Pinout","text":""},{"location":"echopilot_usba_pinout/#echopilot-carrier-board-connector-j1","title":"EchoPilot Carrier Board Connector (J1)","text":"<p>This connector is used along with the provided cable to connect to J24 or J29 on the Carrier Board. It provides standard USB-A SuperSpeed connectivity to peripherals.</p> <p>Connector: J1, Part Number: SM10B-SRSS-TB(LF)(SN) Mating Connector: SHR-10V-S-B</p> Pin Number Direction Voltage Pin Description PIN 1 Pwr GND GND PIN 2 Pwr +5V USBSS Tx+ PIN 3 O +3.3V USBSS Tx- PIN 4 O +3.3V GND PIN 5 O +3.3V USBSS Rx+ PIN 6 O +3.3V USBSS Rx- PIN 7 O +3.3V GND PIN 8 O +3.3V USB D+ PIN 9 O +3.3V USB D- PIN 10 O +3.3V Vbus"},{"location":"echopilot_usba_pinout/#usb-a-connector","title":"USB-A Connector","text":"<p>USB-A SuperSpeed downstream devices are supported with a current draw of up to 1.0A. Supports USB 3.1 SuperSpeed Devices. The standard carrier board utilizes a TUSB8042 hub. Note that 1uF capacitors are placed on the Tx+ and Tx- lines on the carrier board near the connector.</p>"},{"location":"echopilot_usba_pinout/#step-file-download","title":"STEP File Download","text":"<p>EchoPilot AI USB3 A Breakout Board 3D model (STEP) File Download (right click, save link as)</p>"},{"location":"installing_deepstream/","title":"Installing DeepStream and CUDA for the Jetson","text":"<p>NVIDIA\u00ae DeepStream Software Development Kit (SDK) is an accelerated AI framework to build intelligent video analytics (IVA) pipelines. DeepStream runs on NVIDIA\u00ae Jetson NX\u2122, NVIDIA\u00ae Jetson Orin\u2122 NX, NVIDIA\u00ae Jetson Orin\u2122 Nano in conjunction with the EchoPilot AI. </p> <p>The CUDA Toolkit provides a development environment for creating high-performance GPU-accelerated applications.</p> <p>The instructions below show how to install both. These instructions were developed using a Jetson Orin NX with a 256 GB SSD, running L4T 35.4.1. In most cases, you will not be able to install this software without significant available storage space. E.g., an Xavier NX with only a 16 GB eMMC will not have enough storage space. We recommend adding a NVMe SSD before proceeding. </p> <p>Note</p> <p>The instructions below assume that the EchoPilot AI has internet access and you are logged in to the console. Since EchoPilotAI Jetson hardware is provided with a static IP address, it is often simpler to enable DHCP and let the Jetson get internet through your LAN's router. To do this, you can use the nmcli commands to change the static-eth0 connection profile to auto/hdcp. <pre><code>sudo nmcli con mod static-eth0 ipv4.method auto\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> When you are done and would like to return the IP config to static, use: <pre><code>sudo nmcli con mod static-eth0 ipv4.addresses \"10.223.44.55/16\"   # For example\nsudo nmcli con down static-eth0\nsudo nmcli con up static-eth0\n</code></pre> Remember if you change the network during a ssh session, you will lose connection. It is recommendced to make network system changes when on a USB Console connection. </p>"},{"location":"installing_deepstream/#install-deepstream","title":"Install DeepStream","text":"<p>Start by doing an apt update. <pre><code>sudo apt-get update\n</code></pre></p>"},{"location":"installing_deepstream/#install-dependencies","title":"Install dependencies","text":"<pre><code>sudo apt install \\\nbuild_essential \\\nlibssl1.1 \\\nlibgstreamer1.0-0 \\\ngstreamer1.0-tools \\\ngstreamer1.0-plugins-good \\\ngstreamer1.0-plugins-bad \\\ngstreamer1.0-plugins-ugly \\\ngstreamer1.0-libav \\\nlibgstreamer-plugins-base1.0-dev \\\nlibgstrtspserver-1.0-0 \\\nlibjansson4 \\\nlibyaml-cpp-dev\n</code></pre>"},{"location":"installing_deepstream/#install-librdkafka","title":"Install librdkafka","text":"<ol> <li>Clone the repo <pre><code>git clone https://github.com/edenhill/librdkafka.git\n</code></pre></li> <li>Configure, build and install <pre><code>cd librdkafka\ngit reset --hard 7101c2310341ab3f4675fc565f64f0967e135a6a\n./configure\nmake\nsudo make install\n</code></pre></li> <li>Copy the generated files to the deepstream directory. <pre><code>sudo mkdir -p /opt/nvidia/deepstream/deepstream-6.3/lib\nsudo cp /usr/local/lib/librdkafka* /opt/nvidia/deepstream/deepstream-6.3/lib\n</code></pre></li> </ol>"},{"location":"installing_deepstream/#get-and-install-the-deepstream-sdk","title":"Get and install the Deepstream SDK","text":"<pre><code>wget --content-disposition 'https://api.ngc.nvidia.com/v2/resources/org/nvidia/deepstream/6.3/files?redirect=true&amp;path=deepstream-6.3_6.3.0-1_arm64.deb' -O deepstream-6.3_6.3.0-1_arm64.deb\nsudo apt-get install ./deepstream-6.3_6.3.0-1_arm64.deb\n</code></pre>"},{"location":"installing_deepstream/#install-cuda","title":"Install CUDA","text":"<pre><code>wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/sbsa/cuda-keyring_1.1-1_all.deb\nsudo dpkg -i cuda-keyring_1.1-1_all.deb\nsudo apt-get update\nsudo apt-get -y install cuda-toolkit-12-3\n</code></pre>"},{"location":"installing_deepstream/#install-cuda-driver","title":"Install CUDA driver","text":"<pre><code>sudo apt-get install -y cuda-drivers\n</code></pre>"},{"location":"installing_deepstream/#boost-the-clocks","title":"Boost the clocks","text":"<p><pre><code>sudo nvpmodel -m 8\nsudo jetson_clocks\n</code></pre> Now Reboot the system.</p>"},{"location":"installing_deepstream/#verify-functionality","title":"Verify functionality","text":"<p>At this point, the <code>deepstream-app</code> should run without errors: <pre><code>deepstream-app --help\n</code></pre></p>"},{"location":"installing_deepstream/#explore-sample-code","title":"Explore Sample Code","text":"<p>Browse and run precompiled sample applications in <code>sources/apps/sample_apps</code>. Follow the directory\u2019s README file to run the application.</p>"}]}